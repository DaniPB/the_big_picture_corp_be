---
http_interactions:
- request:
    method: get
    uri: https://www.rottentomatoes.com/tv/friends
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Down/5.4.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Etag:
      - W/"2d8c1-E3BIy3Joi2+Jf31CHfc1VQ/xtPI"
      X-Content-Type-Options:
      - nosniff
      X-Response-Time:
      - 43.512ms
      Vary:
      - Accept-Encoding
      Cache-Control:
      - max-age=120
      Expires:
      - Sat, 01 Jul 2023 14:58:27 GMT
      Date:
      - Sat, 01 Jul 2023 14:56:27 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - Transfer-Encoding
      - keep-alive
      Set-Cookie:
      - ak_bmsc=D301C6DA629E35234AF7BF76F653741E~000000000000000000000000000000~YAAQIlITAqCFXt2IAQAAupD0ERS96/D8WcGVSY1eE5NeGhQqsAjY2/3InRrx6K2jsbHnOeqOCFn4BsWqyhXJUVz/yvMFE4WYJCtBBdYsgEPw3ah2CZtxVkvV7FmathOJV8Zajz2Gb/YxyumGCI0LLs7RoDWvvKOD3PUc2oqTHLl0fgcdWyywU3ZT69pqWkH+v35ecP1QXsHLBU55q7B7QjG+QuNDEA+vmtBYOK/0TEkKcctOqRtpotBx9A6J1eLh3rnZnE0pFXPA7/7GwqhhdaBFJR6ZNK9u1D4Rs15tVNsgjOYEfmW3ZG6U82thamIrV5WFTwDWlHN0JoAlHVliTaLNN3fuMlkp0ONP1i0/F+d4Dydvhzk99D3MMDBH4d9ubX7ZwlpWla+rkGxuqxXtkYTEZ3WRsGa4+wsxeQ==;
        Domain=.rottentomatoes.com; Path=/; Expires=Sat, 01 Jul 2023 16:56:27 GMT;
        Max-Age=7200; HttpOnly
      - akacd_RTReplatform=2177452799~rv=61~id=720b6eed5df2673064afadebb96664af; path=/;
        Expires=Mon, 31 Dec 2038 23:59:59 GMT; Secure; SameSite=None
      - akamai_generated_location={"zip":"""","city":"MUNICH","state":"BY","county":"""","areacode":"""","lat":"48.15","long":"11.58","countrycode":"DE"};
        expires=Mon, 31-Jul-2023 14:56:27 GMT; path=/; domain=.rottentomatoes.com;
        secure
      X-Frame-Options:
      - SAMEORIGIN
      Strict-Transport-Security:
      - max-age=31536000 ; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" prefix="fb: http://www.facebook.com/2008/fbml og: http://opengraphprotocol.org/schema/">
    <head prefix="og: http://ogp.me/ns# flixstertomatoes: http://ogp.me/ns/apps/flixstertomatoes#">
        
            
                <script
                    charset="UTF-8"
                    crossorigin="anonymous"
                    data-domain-script="7e979733-6841-4fce-9182-515fac69187f"
                    integrity="sha384-WEHwEli88wqOiQd913F1utFZiwisa8XhCkbjLnbKEpFa/WbFcPKeGg7h4fdsv0Z/"
                    src="https://cdn.cookielaw.org/consent/7e979733-6841-4fce-9182-515fac69187f/otSDKStub.js"
                    type="text/javascript"
                >
                </script>
                <script type="text/javascript">
                    function OptanonWrapper() { }
                </script>
            

            
                <script
                    ccpa-opt-out-ids="dummy"
                    ccpa-opt-out-geo="US"
                    ccpa-opt-out-lspa="false"
                    charset="UTF-8"
                    src="https://cdn.cookielaw.org/opt-out/otCCPAiab.js"
                    type="text/javascript"
                >
                </script>
            

            
            <script src="/assets/pizza-pie/javascripts/bundles/roma/rt-common.js?single"></script>
            
        

        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Friends - Rotten Tomatoes</title>
        <meta name="description" content="Three young men and three young women -- of the BFF kind -- live in the same apartment complex and face life and love in New York. They're not above sticking their noses into one another's business and swapping romantic partners, which always leads to the kind of hilarity average people will never experience -- especially during breakups.">

        
            <link rel="canonical" href="https://www.rottentomatoes.com/tv/friends">
        

        
            
        

        <link rel="shortcut icon" sizes="76x76" type="image/x-icon" href="https://www.rottentomatoes.com/assets/pizza-pie/images/favicon.ico" />
        

        
            <meta property="fb:app_id" content="">
            <meta property="og:site_name" content="Rotten Tomatoes">
            <meta property="og:title" content="Friends">
            <meta property="og:description" content="Synopsis:Three young men and three young women -- of the BFF kind -- live in the same apartment complex and face life and love in New York. They're not above sticking their noses into one another's business and swapping romantic partners, which always leads to the kind of hilarity average people will never experience -- especially during breakups.">
            <meta property="og:type" content="video.tv_show">
            <meta property="og:url" content="https://www.rottentomatoes.com/tv/friends">
            <meta property="og:image" content="https://flxt.tmsimg.com/assets/p183931_b_v8_ac.jpg">
            <meta property="og:locale" content="en_US">
        

        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:image" content="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/RT_TwitterCard_2018.jpg">
        <meta name="twitter:title" content="Friends">
        <meta name="twitter:text:title" content="Friends">
        <meta name="twitter:description" content="Three young men and three young women -- of the BFF kind -- live in the same apartment complex and face life and love in New York. They're not above sticking their noses into one another's business and swapping romantic partners, which always leads to the kind of hilarity average people will never experience -- especially during breakups.">
        <meta name="twitter:site" content="@rottentomatoes">

        <link rel="manifest" href="https://www.rottentomatoes.com/assets/pizza-pie/manifest/manifest.json" />

        <link rel="apple-touch-icon" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-60.jpg" />
        <link rel="apple-touch-icon" sizes="152x152" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-152.jpg" />
        <link rel="apple-touch-icon" sizes="167x167" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-167.jpg" />
        <link rel="apple-touch-icon" sizes="180x180" href="https://www.rottentomatoes.com/assets/pizza-pie/head-assets/images/apple-touch-icon-180.jpg" />

        <!-- JSON+LD -->
        
            
                <script type="application/ld+json">
                {"@context":"http://schema.org","@type":"TVSeries","url":"/tv/friends","name":"Friends","startDate":"1994-09-22","image":[{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_b_h9_ac.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_b_v9_ac.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_b_v8_ac.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_b_h10_af.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_ce_h9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_i_h9_af.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_i_v9_ag.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_i_v8_ag.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_i_h8_ag.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_l_h9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_n30905_cc_v9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_n44345_cc_v9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_n44418_cc_v9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_n67980_cc_v9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_n67988_cc_v9_aa.jpg"},{"@type":"ImageObject","url":"https://flxt.tmsimg.com/assets/p183931_n167977_cc_v3_aa.jpg"}],"aggregateRating":{"@type":"AggregateRating","bestRating":"100","description":"The Tomatometer rating – based on the published opinions of hundreds of film and television critics – is a trusted measurement of movie and TV programming quality for millions of moviegoers. It represents the percentage of professional critic reviews that are positive for a given film or television show.","name":"Tomatometer","ratingCount":90,"ratingValue":"79","reviewCount":90,"worstRating":"0"},"actor":[{"@type":"Person","name":"Jennifer Aniston","sameAs":"https://www.rottentomatoes.com/celebrity/jennifer_aniston","image":"https://flxt.tmsimg.com/assets/30905_v9_bc.jpg"},{"@type":"Person","name":"Courteney Cox","sameAs":"https://www.rottentomatoes.com/celebrity/courteney_cox","image":"https://flxt.tmsimg.com/assets/13912_v9_bb.jpg"},{"@type":"Person","name":"Lisa Kudrow","sameAs":"https://www.rottentomatoes.com/celebrity/lisa_kudrow","image":"https://flxt.tmsimg.com/assets/67988_v9_ba.jpg"},{"@type":"Person","name":"Matt LeBlanc","sameAs":"https://www.rottentomatoes.com/celebrity/matt_leblanc","image":"https://flxt.tmsimg.com/assets/44345_v9_bb.jpg"},{"@type":"Person","name":"Matthew Perry","sameAs":"https://www.rottentomatoes.com/celebrity/matthew_perry","image":"https://flxt.tmsimg.com/assets/44418_v9_bb.jpg"},{"@type":"Person","name":"David Schwimmer","sameAs":"https://www.rottentomatoes.com/celebrity/david_schwimmer","image":"https://flxt.tmsimg.com/assets/67980_v9_bb.jpg"}],"containsSeason":[{"@type":"TVSeason","name":"Season 10","url":"https://www.rottentomatoes.com/tv/friends/s10"},{"@type":"TVSeason","name":"Season 9","url":"https://www.rottentomatoes.com/tv/friends/s09"},{"@type":"TVSeason","name":"Season 8","url":"https://www.rottentomatoes.com/tv/friends/s08"},{"@type":"TVSeason","name":"Season 7","url":"https://www.rottentomatoes.com/tv/friends/s07"},{"@type":"TVSeason","name":"Season 6","url":"https://www.rottentomatoes.com/tv/friends/s06"},{"@type":"TVSeason","name":"Season 5","url":"https://www.rottentomatoes.com/tv/friends/s05"},{"@type":"TVSeason","name":"Season 4","url":"https://www.rottentomatoes.com/tv/friends/s04"},{"@type":"TVSeason","name":"Season 3","url":"https://www.rottentomatoes.com/tv/friends/s03"},{"@type":"TVSeason","name":"Season 2","url":"https://www.rottentomatoes.com/tv/friends/s02"},{"@type":"TVSeason","name":"Season 1","url":"https://www.rottentomatoes.com/tv/friends/s01"}],"video":[]}
                </script>
            
        

        
        

        
        <meta name="google-site-verification" content="VPPXtECgUUeuATBacnqnCm4ydGO99reF-xgNklSbNbc" />

        
        <meta name="msvalidate.01" content="034F16304017CA7DCF45D43850915323" />
        <meta name="theme-color" content="#FA320A">

        <!-- DNS prefetch -->
        <meta http-equiv="x-dns-prefetch-control" content="on">
        
            <link rel="dns-prefetch" href="//www.rottentomatoes.com" />
        
        
            <link rel="preconnect" href="//www.rottentomatoes.com" />
        

        
        

        

        
<!-- BEGIN: critical-->
<style id="critical-path">*,:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}a,aside,b,body,button,div,em,h1,h2,html,img,label,li,p,section,span,ul{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}aside,section{display:block}body{line-height:1}li,ul{list-style:none}a{text-decoration:none}img{vertical-align:middle}h1,h2{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}button{background-color:transparent}.hide{display:none!important}.unset{font-size:unset;font-weight:unset;line-height:unset;margin:unset;padding:unset;color:inherit}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}:root{--red:#FA320A;--redDark1:#A33E2A;--blue:#3976DC;--blueHover:#2A62C0;--gray:#757A84;--grayLight1:#F3F3F3;--grayLight2:#E9E9EA;--grayLight3:#DCDCE6;--grayLight4:#BCBDBE;--grayDark1:#505257;--grayDark2:#2A2C32;--yellow:#FFB600;--white:#FFFFFF;--black:#000000;--yellowLegacy:#FFE400;--blueLightLegacy:#EBF3FE;--fontFranklinGothic:"Franklin Gothic",-apple-system,BlinkMacSystemFont,"PT Sans",Arial,Sans-Serif;--fontNeusa:"Neusa","Impact","Helvetica Neue",Arial,Sans-Serif;--fontMonospace:"Courier New",Courier,monospace;--fontRtIcon:"rt-icon";--borderRadius:6px}html{--webkit-font-smoothing:antialiased;--moz-osx-font-smoothing:grayscale;font-size:16px}body{background-color:#f3f3f3;color:#2a2c32;font-family:var(--fontFranklinGothic);font-size:1rem;line-height:1.5;letter-spacing:.016em}p{font-family:var(--fontFranklinGothic);font-size:1rem;font-weight:400;line-height:1.25;margin-bottom:1.25rem}section{margin-bottom:2.5rem}.button,button{display:inline-block;height:40px;font-family:var(--fontFranklinGothic);font-size:.875rem;font-weight:500;line-height:2.85;padding:0 16px;text-align:center;text-overflow:ellipsis;text-transform:uppercase;vertical-align:middle;-webkit-line-clamp:2;white-space:nowrap;word-wrap:break-word;border:1px transparent;border-radius:4px;background-color:#3976dc;color:#fff}.button--link{height:auto;background-color:transparent;color:#3976dc;font-size:1rem;line-height:inherit;padding:0}button.transparent{width:inherit;height:inherit;padding:0;background:0 0}h1{font-family:var(--fontFranklinGothic);font-weight:500;font-size:1.625rem;letter-spacing:0;line-height:1.15;margin-bottom:1.15em}.h2,h2{font-family:var(--fontNeusa);font-weight:500;font-size:1.25rem;letter-spacing:0;line-height:1.2;padding-left:9px;text-transform:uppercase;margin-bottom:1em}.h2:before,h2:before{position:absolute;content:"";height:1.1em;border-left:3px solid #fa320a;margin:-1px 0 0 -9px}.h3{font-family:var(--fontFranklinGothic);font-weight:500;font-size:1.25rem;line-height:1.2;letter-spacing:0;margin-bottom:1.25rem}.h4{font-family:var(--fontFranklinGothic);font-weight:600;line-height:1.17;letter-spacing:.01em}.h4{font-size:1.125rem;margin-bottom:1rem}a{background-color:transparent;color:#3976dc;fill:#2a2c32;font-family:var(--fontFranklinGothic);font-size:inherit;font-weight:400;line-height:inherit;letter-spacing:inherit;text-decoration:none}label{font-family:var(--fontFranklinGothic);font-size:1rem;font-weight:500;letter-spacing:.31px;line-height:1.25}b{font-weight:600}em{font-style:italic}ul{padding:5px 0}ul ul{margin-top:0;margin-left:12px}li{margin-bottom:.4em;text-align:-webkit-match-parent}.list-inline{list-style:none}.list-inline>li{display:inline-block}img{max-width:100%}[skeleton]{display:block;background-color:#eee;color:transparent}[skeleton] *{visibility:hidden}[skeleton=panel]{border-radius:4px}[skeleton=transparent]{background-color:transparent}.roma .layout-body{line-height:1.25}.roma .layout-content{background-color:var(--white);overflow-x:hidden;padding-left:15px;padding-right:15px}.roma .container{margin-right:auto;margin-left:auto}@media (min-width:768px){.roma .layout-body{padding:0}.roma .container{overflow-x:unset;width:1100px}}.footer__content-mobile-block{display:block;color:#fff;font-size:.875rem;padding:15px 15px 69px;text-align:center;font-family:var(--fontFranklinGothic)}.footer__content-mobile-block a{font-size:.875rem}.footer__links-list{padding:0;margin-left:-5px;margin-bottom:30px}.footer__links-list-item{margin-bottom:0;padding:2px 5px;font-size:1rem}.footer__links-list-item a{color:#fff;fill:#fff;line-height:1.375rem}.footer__links-list-item a#ot-sdk-btn.ot-sdk-show-settings{color:#fff;border:initial;height:initial;white-space:initial;padding:2px 5px;font-size:1rem;line-height:initial;background-color:initial}.footer__links-list-item a#ot-sdk-btn.ot-sdk-show-settings.mobile{font-size:.875rem}.footer__ccpa-icon{display:inline-block;width:30px;margin:0 0 2px 0}.footer__newsletter-btn{display:flex;justify-content:center;align-items:center;width:175px;margin:10px auto;font-weight:500;color:#fff}.footer__copyright-legal{margin-bottom:0;font-size:1rem}@media (min-width:768px){.footer__content-mobile-block{display:none}.footer__content-group{padding:20px 0}.footer__copyright-legal{color:#757a84;font-size:.875rem}}bottom-nav{position:fixed;bottom:0;left:0;width:100%;height:84px;z-index:100}@media (min-width:768px){bottom-nav{display:none}}rt-header{height:55px}rt-header[skeleton]{display:block}rt-header .skip-link{clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}rt-header a{color:var(--grayDark2)}rt-header a[slot=logo] img{height:35px}rt-header li ul,rt-header ul{margin:0;padding:0}rt-header ul[slot=nav-links] a,rt-header ul[slot=nav-links] button{margin:0 15px;color:var(--white);font-family:var(--fontFranklinGothic);font-size:14px;font-weight:500;line-height:inherit}rt-header ul[slot=nav-links] li{margin-bottom:.4em}rt-header ul[slot=nav-links] .masthead-user-link{display:flex;align-items:center;color:var(--white);font-size:inherit;font-weight:500;margin-left:10px}rt-header ul[slot=nav-links] .masthead-user-link img{height:14px;margin-right:5px;vertical-align:text-bottom}rt-header ul[slot=nav-links] .masthead-user-link p{margin-bottom:0}rt-header ul[slot=nav-links] .masthead-user-link rt-icon{fill:var(--white)}rt-header ul[slot=nav-links] rt-header-user-info{position:absolute;top:30px;left:auto;right:0;z-index:103}rt-header ul[slot=nav-links] rt-header-user-info a{position:relative;margin:0;color:var(--grayDark2);font-size:16px;font-weight:400;z-index:2}rt-header ul[slot=nav-links] rt-header-user-info .username{font-size:16px;font-weight:500px;color:var(--grayDark2)}rt-header ul[slot=nav-links] rt-header-user-info .dropdown-link{color:var(--grayDark2);margin-bottom:.4em}rt-header ul[slot=nav-links] rt-header-user-info .rating-count-block,rt-header ul[slot=nav-links] rt-header-user-info .wts-count-block{font-size:14px;font-weight:400px;color:var(--gray)}rt-header ul[slot=nav-links] rt-header-user-info .wts-count-block rt-icon[icon=plus]{fill:var(--blue)}rt-header ul[slot=nav-links] rt-header-user-info .rating-count-block rt-icon[icon=star]{fill:var(--yellow)}rt-header rt-header-nav-item{padding:13px 15px;color:var(--white)}rt-header rt-header-nav-item>a[slot=link]{color:var(--white);font-family:var(--fontNeusa);letter-spacing:.9px;text-transform:uppercase;position:relative}rt-header rt-header-nav-item temporary-display{position:absolute;top:-20px;right:-15px}rt-header rt-header-nav-item temporary-display rt-badge{font-size:12px}rt-header rt-header-nav-item-dropdown[aria-expanded=false]{display:none}rt-header rt-header-nav-item-dropdown-list:last-child{margin-right:0}rt-header rt-header-nav-item-dropdown-list{margin-right:15px}rt-header rt-header-nav-item-dropdown-list ul{margin-bottom:15px}rt-header rt-header-nav-item-dropdown-list li{margin-bottom:.4em}rt-header rt-header-nav-item-dropdown-list a{display:flex;width:100%}rt-header rt-header-nav-item-dropdown-list a span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:215px}rt-header rt-header-nav-item-dropdown-list a.what-to-watch{align-items:center;gap:3px}rt-header rt-header-nav-item-dropdown-list p{display:flex}@media (min-width:768px){rt-header{height:100px}rt-header a[slot=logo]{margin:15px}rt-header a[slot=logo] img{height:50px}}search-algolia{flex:1;font-size:16px;z-index:199;margin-left:15px}search-algolia[skeleton]{height:35px;border-radius:26px;margin-right:15px;width:100%}search-algolia-controls a,search-algolia-controls button,search-algolia-controls input{font-family:var(--fontFranklinGothic)}search-algolia-controls input{color:var(--white);border:1px solid var(--white)}search-algolia-controls a rt-icon,search-algolia-controls button rt-icon{fill:#fff}search-algolia-controls a{display:flex;width:fit-content;width:-moz-fit-content}search-algolia-controls button{display:flex;border-radius:0;background:0 0;height:auto;padding:0;line-height:0}search-algolia-controls button.search-clear{font-size:20px}search-algolia-controls button.search-cancel{padding-right:15px;font-size:16px}search-algolia-results-category{margin-bottom:40px;color:var(--grayDark2)}search-algolia-results-category[slot=none]{margin-bottom:0}search-algolia-results-category ul{padding:0}@media (min-width:768px){search-algolia{margin-right:15px}}.trending-bar{background-color:rgba(0,0,0,.6);color:#fff;display:none;padding:4px 10px;font-size:14px;z-index:1;opacity:.9;position:relative;height:26px;margin-bottom:0}.trending-bar a{color:#fff}.trending-bar__header{color:#ffe400;margin-bottom:0;padding-right:5px;white-space:nowrap;font-size:16px;font-family:var(--fontNeusa);line-height:18px;letter-spacing:.055em;text-transform:uppercase}.trending-bar__list{display:flex;align-items:center;padding:0}.trending-bar__list li{margin-bottom:0}.trending-bar__link,.trending-bar__social-link{margin-right:2px;padding:0 5px;font-weight:400;line-height:18px}.trending-bar__social-link{font-size:14px;fill:#fff}.trending-list-wrap{display:flex;flex-wrap:nowrap;justify-content:space-between;align-items:flex-start}@media (min-width:768px){.trending-bar{display:block}}#trending_bar_ad{position:absolute;top:0;right:0}.roma-layout__body{line-height:1.25}.roma-layout__content{background-color:var(--white);overflow-x:hidden;padding-left:15px;padding-right:15px}.container{margin-right:auto;margin-left:auto}@media (min-width:768px){.container{overflow-x:unset;width:1100px;padding-left:15px;padding-right:15px}.roma-layout__body{padding:0}}.layout{display:flex;justify-content:space-between}.layout__column{position:relative}.layout__column--sidebar{flex:1}a.skip-link{clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.leaderboard_wrapper .leaderboard_helper{display:block;text-align:center}.leaderboard_wrapper{min-height:50px}.mobile-interscroller{margin:0 auto 32px;width:300px}@media (min-width:768px){.leaderboard_wrapper{padding-top:5px;min-height:90px}.mobile-interscroller{display:none}}.auth-overlay__icon-button{display:flex;border:none;background:0 0;height:26px;font-size:26px;padding:0;z-index:1}.auth-overlay__icon-button rt-icon{fill:#bcbdbe}.auth-overlay__icon-button--close{position:absolute;right:20px}.wts-button__container{width:100%;margin:auto;text-align:center;order:2}.wts-button__container::before{content:"";display:block;height:1px;border:0;border-top:1px solid var(--grayLight1);padding:0;margin:0 auto;width:90%}.button--wts{background-color:transparent;font-family:var(--fontFranklinGothic);font-weight:500;font-size:14px;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.25px;color:var(--blue);visibility:hidden;width:100%}.button--wts::before{content:"";background-repeat:no-repeat;background-size:16px;margin-right:.36em;padding:1px 8px;width:18px;height:18px}.button--wts::before{background-image:url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg version='1.1' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' width='24px' height='24px' xml:space='preserve' role='img'%3E%3Ctitle%3Erticon-circled_plus%3C/title%3E%3Cpath d='M12,1 C14.9173814,1 17.7152744,2.15892524 19.7781746,4.22182541 C21.8410748,6.28472557 23,9.08261861 23,12 C23,18.0751322 18.0751322,23 12,23 C5.92486775,23 1,18.0751322 1,12 C1,5.92486775 5.92486775,1 12,1 Z M12,2.94936709 C7.00147347,2.94936709 2.94936709,7.00147347 2.94936709,12 C2.94936709,16.9985265 7.00147347,21.0506329 12,21.0506329 C16.9985265,21.0506329 21.0506329,16.9985265 21.0506329,12 C21.0506329,9.59962291 20.0970868,7.29755901 18.3997639,5.60023609 C16.702441,3.90291318 14.4003771,2.94936709 12,2.94936709 Z M15.905,10.9392857 C16.4777982,10.9392857 16.9421429,11.4036304 16.9421429,11.9764286 C16.9421429,12.5492268 16.4777982,13.0135714 15.905,13.0135714 L13.0135714,13.0135714 L13.0135714,15.905 C13.0135714,16.4777982 12.5492268,16.9421429 11.9764286,16.9421429 C11.4036304,16.9421429 10.9392857,16.4777982 10.9392857,15.905 L10.9392857,13.0135714 L8.04785714,13.0135714 C7.47505896,13.0135714 7.01071429,12.5492268 7.01071429,11.9764286 C7.01071429,11.4036304 7.47505896,10.9392857 8.04785714,10.9392857 L10.9392857,10.9392857 L10.9392857,8.04785714 C10.9392857,7.47505896 11.4036304,7.01071429 11.9764286,7.01071429 C12.5492268,7.01071429 13.0135714,7.47505896 13.0135714,8.04785714 L13.0135714,10.9392857 L15.905,10.9392857 Z' fill='%233976DC'%3E%3C/path%3E%3C/svg%3E%0A")}.wts-btn__rating-count{font-family:var(--fontFranklinGothic);font-weight:500;font-size:14px;letter-spacing:.22px}@media (min-width:768px){.wts-button__container{margin:0;order:0;width:200px}.wts-button__container::before{content:none;display:none}.button--wts{height:auto;padding:0;visibility:visible;text-align:left}}.wts-ratings-group{display:flex;flex-direction:column;clear:both;justify-content:space-between;margin:auto;width:calc(100% - 30px)}.wts-ratings-group{box-shadow:none}@media (min-width:768px){.wts-ratings-group{box-shadow:none;flex-direction:row;width:100%}}video-player-overlay button.transparent{padding:15px}video-player-overlay button rt-icon[icon=close]{fill:#fff}video-player-overlay .cta-btn.header-cta{display:none;margin:16px}video-player-overlay .cta-btn.footer-cta{width:calc(100% - 68px)}@media (min-width:768px){video-player-overlay rt-icon[icon=close]{display:none;visibility:hidden}video-player-overlay .cta-btn.header-cta{display:inline-block}}#tv-series-overview #sidebar{display:none}@media (min-width:768px){#tv-series-overview #sidebar{display:block;width:300px}#tv-series-overview #sidebar #ad-sidebar{margin-bottom:25px}}#tv-series-overview{margin-bottom:0;padding-top:15px}#tv-series-overview #overview{margin-top:1em}#tv-series-overview #main{width:100%}#tv-series-overview #series-info{margin-bottom:25px}@media (min-width:768px){#tv-series-overview #main{width:745px;margin-right:25px}}#tv-series-overview #topSection{display:flex}#tv-series-overview #topSection tile-dynamic{display:none}#tv-series-overview #topSection score-board{width:100%;height:100%}#tv-series-overview #topSection score-board[skeleton=panel]{width:100%;height:100%}@media (min-width:768px){#tv-series-overview #topSection tile-dynamic{display:block;width:140px;margin-right:15px;flex-shrink:0}#tv-series-overview #topSection tile-dynamic[skeleton=panel]{width:140px;height:210px}#tv-series-overview #topSection score-board[skeleton=panel]{width:100%;height:210px}}#series-info drawer-more{margin-bottom:15px}#series-info drawer-more button{font-size:14px}#series-info p{margin-bottom:0}#news-and-interviews .articles-wrap{display:grid;grid-template-columns:1fr;grid-gap:1em;width:100%}#news-and-interviews .articles-wrap .article{width:100%;margin-bottom:15px}#news-and-interviews .articles-wrap .article a{display:inline-block}#news-and-interviews .articles-wrap .article a img{border-radius:4px;margin-bottom:10px}#news-and-interviews .articles-wrap .article a p{margin-bottom:0}#news-and-interviews .view-all-wrap{text-align:right}#news-and-interviews .view-all-wrap a{font-family:unset}@media (min-width:768px){#news-and-interviews .articles-wrap{grid-template-columns:1fr 1fr 1fr}#news-and-interviews .articles-wrap .article{width:230px;margin-bottom:0}#news-and-interviews .articles-wrap .article img{height:115px;border-radius:4px;margin-bottom:10px}}#scoreboard{min-height:171px}#scoreboard .title{margin:0;text-transform:uppercase;font-family:var(--fontNeusa);font-size:1.625em;font-weight:500;font-stretch:normal;font-style:normal;line-height:.92;letter-spacing:normal;text-align:center;color:#2a2c32}#scoreboard .info{margin:0;display:inline-block;font-family:var(--fontFranklinGothic);font-weight:400;font-stretch:normal;font-style:normal;line-height:1.29;font-size:14px;letter-spacing:normal;color:#2a2c32}score-details{font-family:var(--fontFranklinGothic)}score-details tool-tip button[slot=tool-tip-btn]{background-color:#fff;border:none;font-size:18px;padding:0;line-height:1;height:18px}score-details filter-chip{margin-right:10px}@media (min-width:768px){score-details{font-family:var(--fontFranklinGothic)}}overlay-base .overlay-base-btn{height:24px;background-color:#fff;padding:0}overlay-base .overlay-base-btn rt-icon{font-size:24px}overlay-base filter-chip label{margin-bottom:0;font-size:14px}video-player-overlay button.transparent{padding:15px}video-player-overlay button rt-icon[icon=close]{fill:#fff}video-player-overlay .cta-btn.header-cta{display:none;margin:16px}video-player-overlay .cta-btn.footer-cta{width:calc(100% - 68px)}@media (min-width:768px){video-player-overlay rt-icon[icon=close]{display:none;visibility:hidden}video-player-overlay .cta-btn.header-cta{display:inline-block}}</style>
<!-- /END: critical-->


        
    
        <link rel="preload" href="/assets/pizza-pie/stylesheets/bundles/roma/layouts/default.64e0de82159.css" as="style" onload="this.onload=null;this.rel='stylesheet'">

        

    <link rel="preload" href="/assets/pizza-pie/stylesheets/bundles/roma/tvSeries/index.f91af3400da.css" as="style" onload="this.onload=null;this.rel='stylesheet'">


        <script>
        !function(t){"use strict";t.loadCSS||(t.loadCSS=function(){});var e=loadCSS.relpreload={};if(e.support=function(){var e;try{e=t.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),e.bindMediaToggle=function(t){var e=t.media||"all";function a(){t.media=e}t.addEventListener?t.addEventListener("load",a):t.attachEvent&&t.attachEvent("onload",a),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(a,3e3)},e.poly=function(){if(!e.support())for(var a=t.document.getElementsByTagName("link"),n=0;n<a.length;n++){var o=a[n];"preload"!==o.rel||"style"!==o.getAttribute("as")||o.getAttribute("data-loadcss")||(o.setAttribute("data-loadcss",!0),e.bindMediaToggle(o))}},!e.support()){e.poly();var a=t.setInterval(e.poly,500);t.addEventListener?t.addEventListener("load",function(){e.poly(),t.clearInterval(a)}):t.attachEvent&&t.attachEvent("onload",function(){e.poly(),t.clearInterval(a)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:t.loadCSS=loadCSS}("undefined"!=typeof global?global:this);
        </script>

        <script>
            window.RottenTomatoes = {};
            window.RTLocals = {};
        </script>

        <script>var dataLayer = dataLayer || [];</script>

        
        
    <script id="mps-page-integration">
      window.mpscall = {"adunits":"Multi Logo|Box Ad|Marquee Banner|Top Banner","cag[score]":null,"cag[certified_fresh]":null,"cag[fresh_rotten]":null,"cag[rating]":null,"cag[release]":1994,"cag[movieshow]":"Friends","cag[genre]":null,"cag[urlid]":"friends","cat":"tv|series","field[env]":"production","field[rtid]":null,"path":"/tv/friends","site":"rottentomatoes-web","title":"Friends","type":"series","field[emsid]":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf"};
      var mpsopts={'host':'mps.nbcuni.com', 'updatecorrelator':1};
      var mps=mps||{};mps._ext=mps._ext||{};mps._adsheld=[];mps._queue=mps._queue||{};mps._queue.mpsloaded=mps._queue.mpsloaded||[];mps._queue.mpsinit=mps._queue.mpsinit||[];mps._queue.gptloaded=mps._queue.gptloaded||[];mps._queue.adload=mps._queue.adload||[];mps._queue.adclone=mps._queue.adclone||[];mps._queue.adview=mps._queue.adview||[];mps._queue.refreshads=mps._queue.refreshads||[];mps.__timer=Date.now||function(){return+new Date};mps.__intcode="v2";if(typeof mps.getAd!="function")mps.getAd=function(adunit){if(typeof adunit!="string")return false;var slotid="mps-getad-"+adunit.replace(/\W/g,"");if(!mps._ext||!mps._ext.loaded){mps._queue.gptloaded.push(function(){typeof mps._gptfirst=="function"&&mps._gptfirst(adunit,slotid);mps.insertAd("#"+slotid,adunit)});mps._adsheld.push(adunit)}return'<div id="'+slotid+'" class="mps-wrapper" data-mps-fill-slot="'+adunit+'"></div>'};(function(){head=document.head||document.getElementsByTagName("head")[0],mpsload=document.createElement("script");mpsload.src="//"+mpsopts.host+"/fetch/ext/load-"+mpscall.site+".js?nowrite=2";mpsload.id="mps-load";head.insertBefore(mpsload,head.firstChild)})();
    </script>

        
    <script>
        function endsWith(str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }
    
        //--Ad Unit Loaded (called for each ad loaded)
        var mps = mps||{}; mps._queue = mps._queue||{}; mps._queue.adload = mps._queue.adload||[];
        mps._queue.adload.push(function (eo) {
            if (!eo.isEmpty) {
                var slotName = eo._mps._slot;
    
                if ('topbanner' === slotName) {
                    var leaderboardHeight = eo.size[1];
                    if (leaderboardHeight > 50){
                        
                            $('#header-main').removeClass('header_main_scroll');
                        

                        if (leaderboardHeight < 90){
                            $('.leaderboard_wrapper').css('min-height', leaderboardHeight);
                        }
                        
                        $('#top_leaderboard_wrapper').animate({ height: (leaderboardHeight + 10) },1000);
                    }
                }
    
                if ('trendinggraphic' === slotName) {
                    $('.trending-bar__social').hide();

                    $('.trending-bar__link').addClass('trending-link--truncate');
                }
    
                if ('tomatometer' === slotName) {
                    if (eo.size[0] == 524 && eo.size[1] == 40) {
                        //Increase score panel margin
                        $('#scorePanel').css('margin-bottom', '20px');
                    }
                    // Only show Tomatometer Sponsorship div if rendered
                    $('#tomatometer_sponsorship_ad').show();
                }
            }
        });
    </script>




        
        <script>
            dataLayer.push({"webVersion":"node","rtVersion":3,"loggedInStatus":"","customerId":"","emsID":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","pageName":"rt | tv | overview | Friends","titleGenre":"Comedy","titleId":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","titleName":"Friends","titleType":"Tv"});
        </script>

        
        <script async src="https://cdn.jwplayer.com/libraries/YWQAAwYH.js"></script>
        <script async src="https://sb.scorecardresearch.com/c2/plugins/streamingtag_plugin_jwplayer.js"></script>

        
        
    </head>
    
    <body class="body no-touch js-mptd-layout roma">
        <user-activity-manager></user-activity-manager>

        <auth-initiate-manager></auth-initiate-manager>
<auth-profile-manager></auth-profile-manager>
<overlay-base
    class=""
    data-AuthInitiateManager="overlayBase:close"
    data-PagePollsIndexManager="authOverlay:close"
    hidden
>
    <overlay-flows data-AuthInitiateManager="overlayFlows" slot="content">
        <button slot="close" class="auth-overlay__icon-button auth-overlay__icon-button--close" aria-label="Close" data-qa="close-overlay-btn">
            <rt-icon image icon="close"></rt-icon>
        </button>
    </overlay-flows>
</overlay-base>

<notification-alert data-AuthInitiateManager="authSuccess" class="" animate hidden>
    <rt-icon icon="check-circled"></rt-icon>
    <span>Signed in</span>
</notification-alert>

<div id="auth-templates" data-AuthInitiateManager="authTemplates">
    <template slot="screens" id="cognito-loading">
    <div>
        <loading-spinner id="cognito-auth-loading-spinner"></loading-spinner>
        <style>
            #cognito-auth-loading-spinner {
                font-size: 2em;
                transform: translate(calc(100% - 1em), 250px);
                width: 50%;
            }
        </style>
    </div>
</template>

    <template slot="screens" id="cognito-signup-form">
<auth-signup-screen data-qa="auth-signup-screen">
    <h2 slot="header" class="cognito-signup-form__header" data-qa="auth-signup-screen-title">Log in or sign up for Rotten Tomatoes</h2>
    <rt-button slot="signup-option" theme="light" class="cognito-signup-form__option" value="google" data-qa="auth-signup-screen-google-btn">
        <div class="cognito-signup-form__option__container">
            <span class="cognito-signup-form__option__icon cognito-signup-form__option__icon--google"></span>
            <span class="cognito-signup-form__option__text">Continue with Google</span>
        </div>
    </rt-button>
    <rt-button slot="signup-option" theme="light" class="cognito-signup-form__option" value="email" data-qa="auth-signup-screen-email-btn">
        <div class="cognito-signup-form__option__container">
            <rt-icon image icon="mail" class="cognito-signup-form__option__icon cognito-signup-form__option__icon--mail"></rt-icon>
            <span class="cognito-signup-form__option__text">Continue with Email</span>
        </div>
    </rt-button>
        
    <input-label slot="email">
        <label slot="label" for="cognito-email-input" class="auth-form__control__label">Email</label>
        <input slot="input" id="cognito-email-input" type="email" data-qa="auth-signup-screen-email">
    </input-label>

    <div slot="info">
        <div class="no-password-container">
            <rt-badge>New</rt-badge>
            <span class="no-password">Where is the password field?</span>
            <tool-tip
                class="cognito-signup-form__tooltip"
                title="Where is the password field?"
                description="Rotten Tomatoes now offers passwordless authentication for all user accounts, making it easier for you to access your information. Simply enter the email address you previously used and hit continue to complete your log-in."
                slot="tooltip"
                nomobilefooter
            >
                <button slot="tool-tip-btn" class="button--link">
                    <rt-icon icon="question-circled" image></rt-icon>
                </button>
            </tool-tip>
        </div>
    </div>
    
    <button slot="continue" class="auth-form__button" data-qa="auth-signup-screen-continue-btn">Continue</button>

    <p slot="help" class="cognito-signup-form-help">
        <a href="/reset-client" data-qa="auth-signup-screen-reset-client-link">Trouble logging in?</a>
    </p>
    
    <p slot="terms-and-policies" class="cognito-signup-form__terms-and-policies">
        By continuing, you agree to the <a href="https://www.fandango.com/policies/privacy-policy" target="_blank" rel="noopener" data-qa="auth-signup-screen-privacy-policy-link">Privacy Policy</a> and 
        the <a href="https://www.fandango.com/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="auth-signup-screen-terms-policies-link">Terms and Policies</a>, and to receive email from Rotten Tomatoes.
    </p>
</auth-signup-screen>
</template>
    <template slot="screens" id="cognito-name-form">
  <auth-name-screen data-qa="auth-name-screen">
    <input-label slot="firstName" data-qa="auth-name-screen-firstname-input">
      <label slot="label" for="cognito-first-name-input" class="auth-form__control__label">First name (Required)</label>
      <input slot="input" id="cognito-first-name-input" data-qa="auth-name-screen-first-name">
    </input-label>
    <input-label slot="lastName" data-qa="auth-name-screen-lastname-input">
      <label slot="label" for="cognito-last-name-input" class="auth-form__control__label">Last name (Required)</label>
      <input slot="input" id="cognito-last-name-input" data-qa="auth-name-screen-last-name">
    </input-label>
    <rt-button slot="createAccount" class="auth-form__button">Create my account</rt-button>
    <p slot="termsAndPolicies" class="cognito-signup-form__terms-and-policies">
      By creating an account, you agree to the
      <a href="https://www.fandango.com/policies/privacy-policy" target="_blank" rel="noopener" data-qa="auth-name-screen-privacy-policy-link"> Privacy Policy </a>
      and the<br>
      <a href="https://www.fandango.com/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="auth-name-screen-terms-policies-link"> Terms and Policies</a>
      , and to receive email from Rotten Tomatoes.
    </p>
  </auth-name-screen>
</template>

    <template slot="screens" id="cognito-checkemail">
    <auth-checkemail-screen data-qa="auth-check-email-screen">
        <span slot="email-icon" class="cognito-check-email__icon--email"></span>
        <span slot="mobile-icon" class="cognito-check-email__icon--mobile"></span>
        <button slot="learn-more" class="text-button" tabindex="0" data-qa="auth-check-email-screen-learn-more-link">LEARN MORE</button>
        <a slot="help" tabindex="0" target="_blank" href="/help_desk" data-qa="auth-check-email-screen-help-link">HELP</a>
    </auth-checkemail-screen>
</template>

    <template slot="screens" id="cognito-learn-more">
  <auth-learn-more-screen data-qa="auth-learn-more-screen">
    <button slot="back" class="auth-overlay__icon-button auth-overlay__icon-button--back">
      <rt-icon icon="left-arrow-stem" image></rt-icon>
    </button>
  </auth-learn-more-screen>
</template>
    <template slot="screens" id="cognito-error">
    <auth-error-screen data-qa="auth-error-screen">
        <h2 slot="heading" class="cognito-error__heading" data-qa="auth-error-screen-title">
            <rt-icon image icon="exclamation-circled" class="cognito-error__icon--exclamation-circled"></rt-icon>
            <span class="js-cognito-error-heading-txt">Email not verified</span>
        </h2>
        <p slot="error-message" class="js-cognito-error-message cognito-error__error-message" data-qa="auth-error-screen-message">
            <!-- error message is set from auth-error-screen WC-->
        </p>
        <p slot="error-code" class="js-cognito-error-code cognito-error__error-message" data-qa="auth-error-screen-code">
            <!-- error code is set from auth-error-screen WC-->
        </p>
        <rt-button slot="tryAgainBtn" class="cognito-error__try-again-btn"><span class="cognito-error__btn-text" data-qa="auth-error-screen-try-again-btn">TRY AGAIN</span></rt-button>
        <rt-button slot="cancelBtn" class="cognito-error__cancel-btn" theme="light"><span class="cognito-error__btn-text" data-qa="auth-error-screen-cancel-btn">CANCEL</span></rt-button>
    </auth-error-screen>
</template>

    <template slot="screens" id="cognito-opt-in">
  <auth-optin-screen data-qa="auth-opt-in-screen">
    <div slot="newsletterText">
      <h2 class="cognito-optin-form__header unset">Let's keep in touch</h2>
      <p>
        Stay up-to-date on all the latest Rotten Tomatoes news! 
        Tap "Sign me up" below to receive our weekly newsletter 
        with updates on movies, TV shows, Rotten Tomatoes podcast and more.
      </p>
    </div>
    <button slot="optInButton" data-qa="auth-opt-in-screen-opt-in-btn">
      Sign me up
    </button>
    <button slot="optOutButton" class="button--outline" data-qa="auth-opt-in-screen-opt-out-btn">
        No thanks
    </button>
  </auth-optin-screen>
</template>

    <template slot="screens" id="cognito-opt-in-success">
    <auth-verify-screen>
        <rt-icon icon="check-circled" slot="icon"></rt-icon>
        <p class="h3" slot="status">OK, got it!</p>
    </auth-verify-screen>
</template>

</div>


        <div id="emptyPlaceholder"></div> 

        
            
            <script ASYNC src="//assets.adobedtm.com/launch-EN549327edc13e414a9beb5d61bfd9aac6.min.js"></script>
            
        

        <div class="container roma-layout__body layout-body">
            <div id="header_and_leaderboard">
                <div id="top_leaderboard_wrapper" class="leaderboard_wrapper ">
                    <div id="top_leaderboard_helper" class="leaderboard_helper">
                        <ad-unit hidden unitdisplay="desktop" unittype="topbanner">
                            <div slot="adInject"></div>
                        </ad-unit>

                        <ad-unit hidden unitdisplay="mobile" unittype="mbanner">
                            <div slot="adInject"></div>
                        </ad-unit>
                    </div>
                </div>
            </div>

            

  <rt-header-manager></rt-header-manager>

  <rt-header
    aria-label="navigation bar"
    class="navbar"
    data-qa="header-nav-bar"
    id="header-main"
    skeleton="panel"
    
  >
  <a slot="skip-link" href="#main-page-content" class="skip-link">Skip to Main Content</a>

  <a id="navbar" slot="logo" href="/" class="logo-wrap">
    
    
      <img
        alt="Rotten Tomatoes"
        data-qa="header-logo"
        src="https://images.fandango.com/cms/assets/2d5a3340-be84-11ed-9d20-83ee649e98bd--rt25-logo-mainnav-161x50.svg"
        fetchpriority="high"
      />
    

    <div class="hide">
      <ad-unit hidden unitdisplay="desktop,mobile" unittype="logorepeat" unittargeting="ploc=rtlogo;">
        <div slot="adInject"></div>
      </ad-unit>
    </div>
  </a>

  <search-algolia slot="desktop-search" skeleton="transparent">
    <search-algolia-controls slot="search-controls">
      <input
        class="search-text"
        aria-label="Search"
        data-qa="search-input"
        placeholder="Search movies, TV, actors, more.."
        slot="search-input"
        type="text"
      />
      <button
        class="search-clear"
        data-qa="search-clear"
        slot="search-clear"
      >
        <rt-icon icon="close" image></rt-icon>
      </button>
      <a
        class="search-submit"
        aria-label="Submit search"
        data-qa="search-submit"
        href="/search"
        slot="search-submit"
      >
        <rt-icon icon="search" image></rt-icon>
      </a>
      <button
        class="search-cancel"
        data-qa="search-cancel"
        slot="search-cancel"
      >
        Cancel
      </button>
    </search-algolia-controls>
    <search-algolia-results slot="search-results" data-qa="search-results-overlay">
      <search-algolia-results-category slot="content" data-qa="search-results-category">
        <h2 slot="title" data-qa="search-category-header" class="h2">Movies / TV</h2>
        <ul slot="results"></ul>
      </search-algolia-results-category>
      <search-algolia-results-category slot="celebrity" data-qa="search-results-category">
        <h2 slot="title" data-qa="search-category-header" class="h2">Celebrity</h2>
        <ul slot="results"></ul>
      </search-algolia-results-category>
      <search-algolia-results-category slot="none">
        <h2 slot="title" data-qa="search-no-results" class="h2">No Results Found</h2>
      </search-algolia-results-category>
      <a slot="view-all" href="/" data-qa="search-view-all">View All</a>
    </search-algolia-results>
  </search-algolia>

  <mobile-search-algolia slot="mobile-search" logoselector="#navbar .logo-wrap" navselector="#navbar" data-qa="mobile-search-algolia"></mobile-search-algolia>

  <ul slot="nav-links">
    <li><a href="/about#whatisthetomatometer" data-qa="header:link-whats-tmeter">What's the Tomatometer&reg;?</a></li>
    <li><a href="/critics" data-qa="header:link-critics-home">Critics</a></li>
    <li data-RtHeaderManager="loginLink">
      <ul>
        <li>
          <button
            id="masthead-show-login-btn"
            class="js-cognito-signin button--link"
            data-AuthInitiateManager="btnSignIn:click"
            data-qa="header:login-btn"
        >Login/signup</button>
        </li>
      </ul>
    </li>
    <li class="hide" data-RtHeaderManager="userItem:keydown,keyup,mouseenter" data-qa="header:user">
      <a class="masthead-user-link" data-RtHeaderManager="navUserlink" rel="nofollow" data-qa="user-profile-link">
        <img data-RtHeaderManager="navUserImg" data-qa="user-profile-thumb">
        <p data-RtHeaderManager="navUserFirstName" data-qa="user-profile-name"></p>
        <rt-icon icon="down-dir" image></rt-icon>
      </a>
      <rt-header-user-info
        class="hide"
        data-RtHeaderManager="userInfo:focusout,mouseleave"
        data-UserActivityManager="userInfo"
      >
        <a slot="imageExpanded" rel="nofollow" href="" data-qa="user-stats-profile-pic">
          <img src="" width="40" alt="">
        </a>
        <a slot="fullName" rel="nofollow" href="" class="username" data-qa="user-stats-name"></a>
        <a slot="wts" rel="nofollow" href="" class="wts-count-block" data-qa="user-stats-wts">
          <rt-icon icon="plus" data-qa="user-stats-ratings-count"></rt-icon>
          <span class="count" data-qa="user-stats-wts-count"></span>
          &nbsp;Wants to See
        </a>
        <a slot="rating" rel="nofollow" href="" class="rating-count-block" data-qa="user-stats-ratings">
          <rt-icon icon="star" data-qa="user-stats-ratings-count"></rt-icon>
          <span class="count"></span>
          &nbsp;Ratings
        </a>

        <a slot="profileLink" rel="nofollow" class="dropdown-link" href="" data-qa="user-stats-profile-link">Profile</a>
        <a slot="accountLink" rel="nofollow" class="dropdown-link" href="/user/account" data-qa="user-stats-account-link">Account</a>
        <a slot="logoutLink" class="dropdown-link" data-RtHeaderManager="logoutLink:click" href="#logout" data-qa="user-stats-logout-link">Log Out</a>
      </rt-header-user-info>
    </li>
  </ul>

  <rt-header-nav slot="nav-dropdowns">
    <rt-header-nav-item slot="movies" data-qa="masthead:movies-dvds">
      <a class="unset" slot="link" href="/browse/movies_in_theaters" data-qa="masthead:movies-dvds-link">Movies</a>
      <rt-header-nav-item-dropdown aria-expanded="false" slot="dropdown">
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-movies-in-theaters">
          <p slot="title" class="h4" data-qa="movies-in-theaters-main-link"><a class="unset" href="/browse/movies_in_theaters">Movies in theaters</a></p>
          <ul slot="links">
            <li data-qa="in-theaters-item">
              <a href="/browse/opening" data-qa="opening-this-week-link">Opening this week</a>
            </li>
            <li data-qa="in-theaters-item">
              <a href="/browse/upcoming" data-qa="coming-soon-link">Coming soon to theaters</a>
            </li>
            <li data-qa="in-theaters-item">
              <a href="/browse/cf-in-theaters" data-qa="certified-fresh-link">Certified fresh movies</a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-on-dvd-streaming">
          <p slot="title" class="h4" data-qa="dvd-streaming-main-link"><a class="unset" href="/browse/movies_at_home">Movies at home</a></p>
          <ul slot="links">
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/affiliates:peacock" data-qa="peacock-link">Peacock</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/affiliates:vudu" data-qa="vudu-link">Vudu</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/affiliates:netflix" data-qa="netflix-link">Netflix streaming</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/affiliates:apple_tv" data-qa="itunes-link">iTunes</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/affiliates:amazon_prime" data-qa="amazon-link">Amazon and amazon prime</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/sort:popular" data-qa="most-popular-link">Most popular streaming movies</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home/critics:certified_fresh" data-qa="certified-fresh-link">Certified fresh movies</a>
            </li>
            <li data-qa="dvd-streaming-item">
              <a href="/browse/movies_at_home" data-qa="browse-all-link">Browse all</a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-movies-more">
          <p slot="title" class="h4">More</p>
          <ul slot="links">
            <li data-qa="what-to-watch-item">
                <a href="https://editorial.rottentomatoes.com/what-to-watch/ " class="what-to-watch" data-qa="what-to-watch-link">What to Watch<rt-badge>New</rt-badge></a>
            </li>
            <li data-qa="top-movies-item">
              <a href="/top" data-qa="top-movies-link">Top movies</a>
            </li>
            <li data-qa="trailers-item">
              <a href="/trailers" data-qa="trailers-link">Trailers</a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>
        
          <rt-header-nav-item-dropdown-list slot="column" cfp>
            <p slot="title" class="h4">Certified fresh picks</p>
            <ul slot="links" class="cfp-wrap" data-qa="header-certified-fresh-picks" data-curation="rt-nav-list-cf-picks">
              
                <li data-qa="cert-fresh-item">
                  
                  <a class="cfp-tile" href="/m/asteroid_city" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <img
            alt="Asteroid City poster image"
            slot="image"
            src="https://resizing.flixster.com/8nfcW2rNwCv3mQHfEHWQMS0O8pw=/206x305/v2/https://resizing.flixster.com/EzQJmsAVWaaiahVMRaZPWeIbgBQ=/fit-in/180x240/v2/https://resizing.flixster.com/N1dnUvL2FS7F9x090K-NlJXr-p4=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzMyNzc2ODYwLTJlMjYtNDgzNi05MmIwLWNiOTgzYzA4YjU0MC5qcGc="
            loading="lazy"
        />
        <div slot="caption" data-track="scores">
            <score-icon-critic
                alignment="left"
                percentage="74"
                state="certified_fresh"
            ></score-icon-critic>
            <span class="p--small">Asteroid City</span>
            <span class="sr-only">Link to Asteroid City</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
              
                <li data-qa="cert-fresh-item">
                  
                  <a class="cfp-tile" href="/m/the_blackening" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <img
            alt="The Blackening poster image"
            slot="image"
            src="https://resizing.flixster.com/d1PD9ADBcdqPL_LtDaTqOEGQGqU=/206x305/v2/https://resizing.flixster.com/wW3lNvKxcvGZU3AsKCmj2vB1ZBo=/fit-in/180x240/v2/https://resizing.flixster.com/1jupVYBDpms7_nG9gpfVjcZqhHA=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYxOTE0Yjg4LWEwMDQtNDM3ZS04NGRhLTYyMmE1NDEyZWY0Yy5qcGc="
            loading="lazy"
        />
        <div slot="caption" data-track="scores">
            <score-icon-critic
                alignment="left"
                percentage="86"
                state="certified_fresh"
            ></score-icon-critic>
            <span class="p--small">The Blackening</span>
            <span class="sr-only">Link to The Blackening</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
              
                <li data-qa="cert-fresh-item">
                  
                  <a class="cfp-tile" href="/m/nimona" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <img
            alt="Nimona poster image"
            slot="image"
            src="https://resizing.flixster.com/FTrRb7yPov2bMNOKGQK-npep644=/206x305/v2/https://resizing.flixster.com/g6-ePdIQgPhNBou9uw0SKn8FNys=/fit-in/180x240/v2/https://resizing.flixster.com/PjEtd6YyyI56iFO2emBjqf6Y99A=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzI4OGNiZjBhLTZkN2ItNGNmOS1iMDhlLTdhNTJmODNhMmQxYy5qcGc="
            loading="lazy"
        />
        <div slot="caption" data-track="scores">
            <score-icon-critic
                alignment="left"
                percentage="93"
                state="certified_fresh"
            ></score-icon-critic>
            <span class="p--small">Nimona</span>
            <span class="sr-only">Link to Nimona</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
          </rt-header-nav-item-dropdown-list>
        
      </rt-header-nav-item-dropdown>
    </rt-header-nav-item>

    <rt-header-nav-item slot="tv" data-qa="masthead:tv">
      <a class="unset" slot="link" href="/browse/tv_series_browse/sort:popular" data-qa="masthead:tv-link">Tv shows</a>
      <rt-header-nav-item-dropdown aria-expanded="false" slot="dropdown">
        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-tv-list1">
            <p slot="title" class="h4" data-curation="rt-hp-text-list-new-tv-this-week">
              New TV Tonight
            </p>
            <ul slot="links" class="score-list-wrap">
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/warrior_2019/s03" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="100"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            Warrior: Season 3
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/hijack/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="91"
        state="certified_fresh"
    ></score-icon-critic>
    <span>
        
            Hijack: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_gold/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="86"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            The Gold: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/jack_ryan/s04" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="86"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            Tom Clancy&#39;s Jack Ryan: Season 4
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_witcher/s03" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="82"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            The Witcher: Season 3
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/grown_ish/s06" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage=""
        state=""
    ></score-icon-critic>
    <span>
        
            grown-ish: Season 6
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/cannes_confidential/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage=""
        state=""
    ></score-icon-critic>
    <span>
        
            Cannes Confidential: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/ten_year_old_tom/s02" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage=""
        state=""
    ></score-icon-critic>
    <span>
        
            Ten-Year-Old Tom: Season 2
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_bachelorette/s20" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage=""
        state=""
    ></score-icon-critic>
    <span>
        
            The Bachelorette: Season 20
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/secret_chef/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage=""
        state=""
    ></score-icon-critic>
    <span>
        
            Secret Chef: Season 1
        
    </span>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="tv-list1-view-all-link"
              href="/browse/tv_series_browse/sort:newest"
              slot="view-all-link"
            >
                View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-tv-list2"]>
            <p slot="title" class="h4" data-curation="rt-hp-text-list-most-popular-tv-on-rt">
              Most Popular TV on RT
            </p>
            <ul slot="links" class="score-list-wrap">
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_witcher/s03" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="82"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            The Witcher: Season 3
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_idol/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="22"
        state="rotten"
    ></score-icon-critic>
    <span>
        
            The Idol: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_bear/s02" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="100"
        state="certified_fresh"
    ></score-icon-critic>
    <span>
        
            The Bear: Season 2
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/secret_invasion/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="63"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            Secret Invasion: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/hijack/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="91"
        state="certified_fresh"
    ></score-icon-critic>
    <span>
        
            Hijack: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/warrior_2019/s03" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="100"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            Warrior: Season 3
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/the_crowded_room/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="31"
        state="rotten"
    ></score-icon-critic>
    <span>
        
            The Crowded Room: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/silo/s01" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="88"
        state="certified_fresh"
    ></score-icon-critic>
    <span>
        
            Silo: Season 1
        
    </span>
</a>
                </li>
              
                <li data-qa="list-item">
                  <a class="score-list-item" href="/tv/black_mirror/s06" data-qa="list-item-link">
    <score-icon-critic
        alignment="left"
        percentage="77"
        state="fresh"
    ></score-icon-critic>
    <span>
        
            Black Mirror: Season 6
        
    </span>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="tv-list2-view-all-link"
              href="/browse/tv_series_browse/sort:popular?"
              slot="view-all-link"
            >
                View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-tv-more">
          <p slot="title" class="h4">More</p>
          <ul slot="links">
            <li data-qa="what-to-watch-item-tv">
              <a href="https://editorial.rottentomatoes.com/what-to-watch/ " class="what-to-watch" data-qa="what-to-watch-link-tv">
                What to Watch<rt-badge>New</rt-badge>
              </a>
            </li>
            <li data-qa="tv-popular-item">
              <a href="/browse/tv_series_browse/sort:popular" data-qa="tv-popular-link">
                <span>Top TV Shows</span>
              </a>
            </li>
            <li data-qa="tv-cf-item">
              <a href="/browse/tv_series_browse/critics:fresh" data-qa="tv-cf-link">
                <span>Certified Fresh TV</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:peacock">
                <span>Peacock</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:vudu">
                <span>Vudu</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:netflix">
                <span>Netflix streaming</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:apple_tv">
                <span>iTunes</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/affiliates:amazon_prime">
                <span>Amazon and amazon prime</span>
              </a>
            </li>
            <li>
              <a href="/browse/tv_series_browse/sort:popular">
                <span>Most popular TV</span>
              </a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>

        
          <rt-header-nav-item-dropdown-list slot="column" cfp data-qa="header-certified-fresh-pick">
            <p slot="title" class="h4">
              Certified fresh pick
            </p>
            <ul slot="links" class="cfp-wrap" data-curation="rt-nav-list-cf-picks">
              <li>
                
                <a class="cfp-tile" href="/tv/hijack/s01" data-qa="cert-fresh-link">
    <tile-dynamic data-qa="tile">
        <img
            alt="Hijack: Season 1 poster image"
            slot="image"
            src="https://resizing.flixster.com/ZfGkQ_EOQgaLdTVjWf130tW86f0=/206x305/v2/https://resizing.flixster.com/ln9uAL_MIZsUlH-ZAf2uwwVse1U=/fit-in/180x240/v2/https://flxt.tmsimg.com/assets/p24706013_b_v13_aa.jpg"
            loading="lazy"
        />
        <div slot="caption" data-track="scores">
            <score-icon-critic
                alignment="left"
                percentage="91"
                state="certified_fresh"
            ></score-icon-critic>
            <span class="p--small">Hijack: Season 1</span>
            <span class="sr-only">Link to Hijack: Season 1</span>
        </div>
    </tile-dynamic>
</a>
              </li>
            </ul>
          </rt-header-nav-item-dropdown-list>
        
      </rt-header-nav-item-dropdown>
    </rt-header-nav-item>

    <rt-header-nav-item slot="trivia">
      <a class="unset"
          slot="link"
          href="https://rottentomatoes.com/daily"
          target="_blank"
          data-qa="masthead:trivia-link"
      >
          Movie Trivia
          <temporary-display
            slot="temporary-display"
            key="trivia"
            element="#triviaLink"
            event="click"
          >
            <rt-badge hidden>New</rt-badge>
          </temporary-display>
      </a>
    </rt-header-nav-item>

    <rt-header-nav-item slot="news" data-qa="masthead:news">
      <a class="unset" slot="link" href="https://editorial.rottentomatoes.com/" data-qa="masthead:news-link">News</a>
      <rt-header-nav-item-dropdown aria-expanded="false" slot="dropdown">
        <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-columns">
          <p slot="title" class="h4">Columns</p>
          <ul slot="links">
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/all-time-lists/" data-pageheader="All-Time Lists" data-qa="column-link">
                All-Time Lists
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/binge-guide/" data-pageheader="Binge Guide" data-qa="column-link">
                Binge Guide
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/comics-on-tv/" data-pageheader="Comics on TV" data-qa="column-link">
                Comics on TV
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/countdown/" data-pageheader="Countdown" data-qa="column-link">
                Countdown
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/five-favorite-films/" data-pageheader="Five Favorite Films" data-qa="column-link">
                Five Favorite Films
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/video-interviews/" data-pageheader="Video Interviews" data-qa="column-link">
                Video Interviews
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/weekend-box-office/" data-pageheader="Weekend Box Office" data-qa="column-link"
              >Weekend Box Office
            </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/weekly-ketchup/" data-pageheader="Weekly Ketchup" data-qa="column-link">
                Weekly Ketchup
              </a>
            </li>
            <li data-qa="column-item">
              <a href="https://editorial.rottentomatoes.com/what-to-watch/" data-pageheader="What to Watch" data-qa="column-link">
                What to Watch
              </a>
            </li>
          </ul>
        </rt-header-nav-item-dropdown-list>

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-guides">
            <p slot="title" class="h4">Guides</p>
            <ul slot="links" class="news-wrap">
              
                <li data-qa="guides-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/guide/movies-to-watch-july-4/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <img
            alt="Movies To Watch July 4th Weekend poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/06/28130158/TopGunMaverick_600x314.jpg"
            loading="lazy"
        />
        <div slot="caption">
            <p>Movies To Watch July 4th Weekend</p>
            <span class="sr-only">Link to Movies To Watch July 4th Weekend</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
                <li data-qa="guides-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/guide/essential-comedy-movies/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <img
            alt="150 Essential Comedy Movies To Watch Now poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2021/09/29092921/ComingtoAmerica.jpg"
            loading="lazy"
        />
        <div slot="caption">
            <p>150 Essential Comedy Movies To Watch Now</p>
            <span class="sr-only">Link to 150 Essential Comedy Movies To Watch Now</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="guides-view-all-link"
              href="https://editorial.rottentomatoes.com/countdown/"
              slot="view-all-link"
            >
              View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-hubs">
            <p slot="title" class="h4">Hubs</p>
            <ul slot="links" class="news-wrap">
              
                <li data-qa="hubs-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/rt-hub/rt25/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <img
            alt="RT25: Celebrating 25 Years of Rotten Tomatoes poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/02/03163756/RT25_Site_600x314.jpg"
            loading="lazy"
        />
        <div slot="caption">
            <p>RT25: Celebrating 25 Years of Rotten Tomatoes</p>
            <span class="sr-only">Link to RT25: Celebrating 25 Years of Rotten Tomatoes</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
                <li data-qa="hubs-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/rt-hub/what-to-watch/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <img
            alt="What to Watch: In Theaters and On Streaming poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/05/04130548/RT_WTW_Generic_2023_Thumbnail_600x314_021623.jpg"
            loading="lazy"
        />
        <div slot="caption">
            <p>What to Watch: In Theaters and On Streaming</p>
            <span class="sr-only">Link to What to Watch: In Theaters and On Streaming</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="hubs-view-all-link"
              href="https://editorial.rottentomatoes.com/rt-hubs/"
              slot="view-all-link"
            >
              View All
            </a>
          </rt-header-nav-item-dropdown-list>
        

        
          <rt-header-nav-item-dropdown-list slot="column" data-qa="header-news-rt-news">
            <p slot="title" class="h4">RT News</p>
            <ul slot="links" class="news-wrap">
              
                <li data-qa="rt-news-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/article/the-most-anticipated-tv-streaming-shows-of-july-2023/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <img
            alt="The Most Anticipated TV &#038; Streaming Shows of July 2023 poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/04/08162316/twisted-metal-10-600x314-1.jpg"
            loading="lazy"
        />
        <div slot="caption">
            <p>The Most Anticipated TV &#038; Streaming Shows of July 2023</p>
            <span class="sr-only">Link to The Most Anticipated TV &#038; Streaming Shows of July 2023</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
                <li data-qa="rt-news-item">
                  <a class="news-tile" href="https://editorial.rottentomatoes.com/article/the-witcher-cast-on-season-3/" data-qa="news-link">
    <tile-dynamic
        data-qa="tile"
        orientation="landscape"
    >
        <img
            alt="<em>The Witcher</em> Cast on Season 3 Shocks and Twists (So Far) poster image"
            slot="image"
            src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/04/25091715/heWitcherS3_keyart-600x314-1.jpg"
            loading="lazy"
        />
        <div slot="caption">
            <p><em>The Witcher</em> Cast on Season 3 Shocks and Twists (So Far)</p>
            <span class="sr-only">Link to <em>The Witcher</em> Cast on Season 3 Shocks and Twists (So Far)</span>
        </div>
    </tile-dynamic>
</a>
                </li>
              
            </ul>
            <a
              class="a--short"
              data-qa="rt-news-view-all-link"
              href="https://editorial.rottentomatoes.com/news/"
              slot="view-all-link"
            >
              View All
            </a>
          </rt-header-nav-item-dropdown-list>
        
      </rt-header-nav-item-dropdown>
    </rt-header-nav-item>

    <rt-header-nav-item slot="showtimes">
      <a
        class="unset"
        slot="link"
        href="https://www.fandango.com/movies-in-theaters"
        target="_blank"
        rel="noopener"
        data-qa="masthead:tickets-showtimes-link"
      >
        Showtimes
      </a>
    </rt-header-nav-item>
  </rt-header-nav>

</rt-header>
<section class="trending-bar">
    

    <ad-unit hidden id="trending_bar_ad" unitdisplay="desktop" unittype="trendinggraphic">
        <div slot="adInject"></div>
    </ad-unit>
    <div id="trending-bar-start" class="trending-list-wrap" data-qa="trending-bar">
        <ul
            class="list-inline trending-bar__list"
            data-curation="rt-nav-trending"
            data-qa="trending-bar-list">
            <li class="trending-bar__header">Trending on RT</li>
            
                <li><a class="trending-bar__link" href="https://www.rottentomatoes.com/m/indiana_jones_and_the_dial_of_destiny/reviews?intcmp=rt-scorecard_tomatometer-reviews"  data-qa="trending-bar-item"> Indiana Jones Reviews </a></li>
            
                <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/guide/movies-to-watch-july-4/"  data-qa="trending-bar-item"> July 4th Movies </a></li>
            
                <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/article/the-witcher-season-3-first-reviews/"  data-qa="trending-bar-item"> The Witcher First Reviews </a></li>
            
                <li><a class="trending-bar__link" href="https://editorial.rottentomatoes.com/guide/marvel-movies-in-order/"  data-qa="trending-bar-item"> Marvel Movies In Order </a></li>
            
                <li><a class="trending-bar__link" href="https://www.rottentomatoes.com/m/nimona"  data-qa="trending-bar-item"> Nimona  </a></li>
            
        </ul>
        <div class="list-inline trending-bar__social" data-qa="trending-bar-social-list">
            <a id="header-facebook-social-link" class="trending-bar__social-link" href="https://www.facebook.com/rottentomatoes" target="_blank" rel="noopener" aria-label="Facebook" data-qa="trending-bar-social-facebook">
                <rt-icon icon="facebook-squared"></rt-icon>
            </a>
            <a id="header-twitter-social-link" class="trending-bar__social-link" href="https://twitter.com/rottentomatoes" target="_blank" rel="noopener" aria-label="Twitter" data-qa="trending-bar-social-twitter">
                <rt-icon icon="twitter"></rt-icon>
            </a>
            <a id="header-instagram-social-link" class="trending-bar__social-link" href="https://www.instagram.com/rottentomatoes/" target="_blank" rel="noopener" aria-label="Instagram" data-qa="trending-bar-social-instagram">
                <rt-icon icon="instagram"></rt-icon>
            </a>
            <a id="header-pinterest-social-link" class="trending-bar__social-link" href="https://www.pinterest.com/rottentomatoes" target="_blank" rel="noopener" aria-label="Pinterest" data-qa="contact-us-pinterest">
                <rt-icon icon="pinterest"></rt-icon>
            </a>
            <a id="header-youtube-social-link" class="trending-bar__social-link" href="https://www.youtube.com/user/rottentomatoes" target="_blank" rel="noopener" aria-label="Youtube" data-qa="trending-bar-social-youtube">
                <rt-icon icon="youtube-play"></rt-icon>
            </a>
        </div>
    </div>
</section>




            <main id="main_container" class="container roma-layout__content layout-content">
                <bottom-nav data-qa="bottom-nav" data-DiscoveryGridsManager="bottomNavComponent">
                    <a slot="template">
                        <bottom-nav-item></bottom-nav-item>
                    </a>
                </bottom-nav>
                <div id="main-page-content">
                    
    
                    

    <section id="tv-series-overview">
        
            <div id="breadcrumbs">
                <p class="p--small">
                    <a href="/">Home</a>
                    
                    <b>&gt;</b>
                    <span>Friends</span>
                </p>
            </div>
        

        
            <h1 class="title">
                Friends
                <span class="h3 subtle">
                
                    (1994 - 2004)
                
                </span>
            </h1>
        

        <div id="super">
            <ad-unit hidden unitdisplay="desktop,mobile" unittype="superdetail">
                <div slot="adInject"></div>
            </ad-unit>
        </div>

        

        <div id="overview" class="layout">
            <div id="main" class="layout__column">
                <section id="topSection">
                    <tile-dynamic
                        class="thumbnail"
                        
                        skeleton="panel"
                    >
                        <img
                            alt="Watch trailer for Friends"
                            data-qa="poster-image"
                            loading="lazy"
                            slot="image"
                            src="https://resizing.flixster.com/01Zw1gY2C1d461-xuEJkUONTqd4=/206x305/v2/https://flxt.tmsimg.com/assets/p183931_b_v8_ac.jpg"
                        />
                        
                    </tile-dynamic>

                    
<score-board 
    
        audiencestate="upright"
        audiencescore="93"
    
    data-qa="score-panel"
    data-ScoreDetailsManager="scoreboard:scoreClick"
    id="scoreboard"
    mediatype="tvseries"
    rating=""
    skeleton="panel"
    tomatometerscore="79"
    tomatometerstate="fresh"
>
    <h1 slot="title" class="title" data-qa="score-panel-title">Friends</h1>
    <p slot="info" class="info" data-qa="score-panel-subtitle"></p>

    

    

    <div slot="sponsorship" id="tomatometer_sponsorship_ad"></div>
</score-board>

<ad-unit hidden class="hide" unitdisplay="desktop,mobile" unittype="tomatometer">
    <div id="tomatometer_sponsorship_ad_script" slot="adInject"></div>
</ad-unit>

<overlay-base
    data-ScoreDetailsManager="overlay"
    hidden
>
    <score-details slot="content" data-qa="modal:scoreDetail">
        <button
            slot="btn-close"
            class="overlay-base-btn"
            data-qa="score-detail-close-btn"
            data-ScoreDetailsManager="btnOverlayClose:click"
        >
            <rt-icon icon="close" image></rt-icon>
        </button>

        <score-details-critics
            data-qa="score-detail-critics-section"
            data-ScoreDetailsManager="scoreDetailsCritics"
            mediatype="tvseries"
            slot="critics"
        >
            <tool-tip
                tomatometer
                title="About tomatometer"
                description="The percentage of Approved Tomatometer Critics who have given this movie a positive review."
                slot="tooltip"
                data-qa="tool-tip"
            >
                <button slot="tool-tip-btn"><rt-icon icon="question-circled" image data-qa="tool-tip-btn"></rt-icon></button>
            </tool-tip>
            <filter-chip
                active="true"
                data-qa="all-critics-btn"
                data-ScoreDetailsManager="filterCriticsAll:clicked"
                label="ALL CRITICS"
                slot="btn-all-critics"
            >
                <label slot="label" class="filter-label">ALL CRITICS</label>
            </filter-chip>
            <filter-chip
                data-qa="top-critics-btn"
                data-ScoreDetailsManager="filterCriticsTop:clicked"
                label="TOP CRITICS"
                slot="btn-top-critics"
            >
                <label slot="label" class="filter-label">TOP CRITICS</label>
            </filter-chip>
        </score-details-critics>

        
            <score-details-audience
                data-qa="score-detail-audience-section"
                data-ScoreDetailsManager="scoreDetailsAudience"
                mediatype="tvseries"
                slot="audience"
            >
                <tool-tip
                    audience
                    encodedhtml
                    title="About audience score"
                    description="The percentage of users who rated this 3.5 stars or higher."
                    slot="tooltip"
                    data-qa="tool-tip"
                >
                    <button slot="tool-tip-btn"><rt-icon icon="question-circled" image data-qa="tool-tip-btn"></rt-icon></button>
                </tool-tip>
                <filter-chip 
                    active="true" 
                    data-qa="verified-audience-btn"
                    data-ScoreDetailsManager="filterAudienceVerified:clicked"
                    label="VERIFIED AUDIENCE" 
                    slot="btn-verified-audience" 
                >
                    <label slot="label" class="filter-label">VERIFIED AUDIENCE</label>
                </filter-chip>
                <filter-chip 
                    data-qa="all-audience-btn"
                    data-ScoreDetailsManager="filterAudienceAll:clicked"
                    label="ALL AUDIENCE" 
                    slot="btn-all-audience" 
                >
                    <label slot="label" class="filter-label">ALL AUDIENCE</label>
                </filter-chip>
            </score-details-audience>
        
    </score-details>
</overlay-base>

<score-details-manager>
    <script id="scoreDetails" type="application/json">{"mediaType":"tvseries","modal":{"audienceScoreAll":{"bandedRatingCount":"5,000+","likedCount":0,"notLikedCount":0,"ratingCount":0,"reviewCount":0,"scoreType":"ALL","state":"upright","value":93},"audienceScoreVerified":{"bandedRatingCount":"","likedCount":0,"notLikedCount":0,"ratingCount":0,"reviewCount":0,"scoreType":"","state":""},"hasAudienceScoreAll":true,"hasAudienceScoreVerified":false,"hasTomatometerScoreAll":true,"hasTomatometerScoreTop":false,"scoreDetailDescription":{"allAudienceScoreMsg":"The percentage of users who rated this 3.5 stars or higher.","nonVerifiableAudienceScoreMsg":"There is no Audience Score because there are not enough user ratings at this time.","tomatometerMsg":"A series gets an Average Tomatometer when at least 50 percent of its seasons have a score. The Average Tomatometer is the sum of all season scores divided by the number of seasons with a Tomatometer.","verifiedAudienceScoreMsg":"The percentage of users who made a verified movie ticket purchase rating this 3.5 stars or higher. <a href=\"https://editorial.rottentomatoes.com/article/introducing-verified-audience-score/\" target=\"_blank\">Learn more</a>"},"showScoreDetailsAudience":true,"tomatometerScoreAll":{"averageRating":"7.00","bandedRatingCount":"","likedCount":70,"notLikedCount":20,"ratingCount":90,"reviewCount":90,"scoreType":"","state":"fresh","value":79},"tomatometerScoreTop":{"bandedRatingCount":"","likedCount":0,"notLikedCount":0,"ratingCount":0,"reviewCount":0,"scoreType":"","state":""}},"primaryImageUrl":"https://resizing.flixster.com/01Zw1gY2C1d461-xuEJkUONTqd4=/206x305/v2/https://flxt.tmsimg.com/assets/p183931_b_v8_ac.jpg","scoreboard":{"audienceCountHref":"/tv/friends/reviews?type=user&intcmp=rt-scorecard_audience-score-reviews","audienceRatingCopy":"Ratings","audienceScore":{"bandedRatingCount":"5,000+","likedCount":0,"notLikedCount":0,"ratingCount":0,"reviewCount":0,"scoreType":"ALL","state":"upright","value":93},"rating":"","showAudienceCount":false,"showCriticsCount":false,"tomatometerCountHref":"/tv/friends/reviews?intcmp=rt-scorecard_tomatometer-reviews","tomatometerScore":{"averageRating":"7.00","bandedRatingCount":"","likedCount":70,"notLikedCount":20,"ratingCount":90,"reviewCount":90,"scoreType":"","state":"fresh","value":79},"title":"Friends","info":""}}</script>
</score-details-manager>
                </section>

                

        
                <section id="series-info" data-qa="section:series-info">
    <h2>Series Info</h2>
    <div class="content">
        <drawer-more status="closed" maxlines="6" skeleton="panel"> 
            <p data-qa="series-info-description" slot="content">
                Three young men and three young women -- of the BFF kind -- live in the same apartment complex and face life and love in New York. They're not above sticking their noses into one another's business and swapping romantic partners, which always leads to the kind of hilarity average people will never experience -- especially during breakups.
            </p>
            <button class="button--link" slot="button">Show More</button>
        </drawer-more>

        <ul>
            

            
                <li class="info-item">
                    <b class="bold" data-qa="series-info-cast">Starring: </b>
                    <span class="info-item-value">
                        
                            
                                <a href="/celebrity/jennifer_aniston" data-qa="cast-member">
                            
                                    <span>Jennifer Aniston, </span>
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/courteney_cox" data-qa="cast-member">
                            
                                    <span>Courteney Cox, </span>
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/lisa_kudrow" data-qa="cast-member">
                            
                                    <span>Lisa Kudrow, </span>
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/matt_leblanc" data-qa="cast-member">
                            
                                    <span>Matt LeBlanc, </span>
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/matthew_perry" data-qa="cast-member">
                            
                                    <span>Matthew Perry</span>
                            
                                </a>
                            
                        
                    </span>
                </li>
            

            
                <li class="info-item">
                    <b class="meta-label subtle" data-qa="series-details-network">TV Network: </b>
                    <span class="info-item-value">NBC</span>
                </li>
            

            
                <li class="info-item">
                    <b class="meta-label subtle" data-qa="series-details-premiere-date-title">Premiere Date: </b>
                    <span class="info-item-value" data-qa="series-details-premiere-date">Sep 22, 1994</span>
                </li>
            

            
                <li class="info-item">
                    <b class="meta-label subtle" data-qa="series-details-genre-title">Genre: </b>
                    <span class="info-item-value" data-qa="series-details-genre">Comedy</span>
                </li>
            

            
                <li class="info-item">
                    <b class="meta-label subtle" data-qa="series-details-producers-title">Executive producers: </b>
                    <span class="info-item-value">
                        
                            
                                <a href="/celebrity/kevin_s_bright_2" data-qa="series-details-producer">
                            Kevin Bright, 
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/david_crane_6" data-qa="series-details-producer">
                            David Crane, 
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/greg_malins" data-qa="series-details-producer">
                            Greg Malins, 
                            
                                </a>
                            
                        
                            
                                <a href="/celebrity/wil_calhoun" data-qa="series-details-producer">
                            Wil Calhoun
                            
                                </a>
                            
                        
                    </span>
                </li>
            
        </ul>
    </div>
</section>


                
<sponsored-carousel-tracker>
  
</sponsored-carousel-tracker>
        
                <ad-unit hidden unitdisplay="mobile" unittype="interscroller" noretry>
                    <aside slot="adInject" class="center mobile-interscroller"></aside>
                </ad-unit>
        
                
  <section id="where-to-watch" class="where-to-watch panel-rt panel-box" data-qa="section:where-to-watch">
    <h2 class="panel-heading where-to-watch__header" data-qa="where-to-watch-header">Where to watch</h2>

    <bubbles-overflow-container data-curation="rt-affiliates-sort-order" data-qa="section:w2w-items">
      
      
        <where-to-watch-meta
          href="https://www.vudu.com/content/movies/details/Friends-The-One-Where-Monica-Gets-a-Roommate-aka-The-One-Where-It-All-Began/135591?cmp=rt_where_to_watch"
          issponsoredlink="false"
          affiliate="vudu"
          skeleton="panel"
          data-qa="affiliate-item">
          <where-to-watch-bubble
            image="vudu"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Buy</span>
          <span slot="coverage">Seasons 1-10</span>
        </where-to-watch-meta>
      
        <where-to-watch-meta
          href="http://www.amazon.com/gp/product/B0B8JBDV8T/ref=pv_ag_gcf?cmp=rt_where_to_watch&amp;tag=rottetomao-20"
          issponsoredlink="true"
          affiliate="amazon-prime-video-us"
          skeleton="panel"
          data-qa="affiliate-item">
          <where-to-watch-bubble
            image="amazon-prime-video-us"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Buy</span>
          <span slot="coverage">Seasons 1-10</span>
        </where-to-watch-meta>
      
        <where-to-watch-meta
          href="https://play.max.com/video/watch/fe25f4c9-e325-4ba3-a5fe-7fe5b24cf4aa?cmp=rt_where_to_watch"
          issponsoredlink="true"
          affiliate="max-us"
          skeleton="panel"
          data-qa="affiliate-item">
          <where-to-watch-bubble
            image="max-us"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Subscription</span>
          <span slot="coverage">Seasons 1-10</span>
        </where-to-watch-meta>
      
        <where-to-watch-meta
          href="https://itunes.apple.com/us/tv-season/season-1-episode-1-the-one-where-monica-gets-a/id1310820448?i=1316271287&amp;cmp=rt_where_to_watch&amp;itsct=RT&amp;itscg=30200&amp;at=10l9IP"
          issponsoredlink="true"
          affiliate="itunes"
          skeleton="panel"
          data-qa="affiliate-item">
          <where-to-watch-bubble
            image="itunes"
            slot="bubble"
            tabindex="-1"
          ></where-to-watch-bubble>
          <span slot="license">Buy</span>
          <span slot="coverage">Seasons 1-10</span>
        </where-to-watch-meta>
      
    </bubbles-overflow-container>
  </section>


        
                
                    <section id="recommendations" class="dynamic-poster-list">
    <div class="dynamic-poster-list__sponsored-header">
        <h2 class="panel-heading">You might also like</h2>
        
        
    </div>
    
    <tiles-carousel-responsive skeleton="panel">
        <button slot="scroll-left">
            <rt-icon slot="icon-arrow-left" image icon="left-chevron"></rt-icon>
        </button>

        
            <tiles-carousel-responsive-item slot="tile">
                <a href="/tv/community">
                    <tile-dynamic>
                        <img
                            alt="Community poster image"
                            loading="lazy"
                            slot="image"
                            src="https://resizing.flixster.com/5nM3a1c5t8pQPleyoVYFJmz6_u8=/130x187/v2/https://flxt.tmsimg.com/assets/p3546220_b_v9_ab.jpg"
                        />
                        <div slot="caption" data-track="scores">
                            <div class="score-icon-pair">
                                <score-icon-critic
                                    alignment="left"
                                    percentage="88"
                                    size="tiny"
                                    slot="critic-score"
                                    state="fresh"
                                ></score-icon-critic>
                                <score-icon-audience
                                    alignment="left"
                                    percentage="88"
                                    size="tiny"
                                    slot="audience-score"
                                    state="upright"
                                ></score-icon-audience>
                            </div>
                            <span class="p--small">Community</span>
                        </div>
                    </tile-dynamic>
                </a>
            </tiles-carousel-responsive-item>
        
            <tiles-carousel-responsive-item slot="tile">
                <a href="/tv/will_and_grace_2017">
                    <tile-dynamic>
                        <img
                            alt="Will &amp; Grace poster image"
                            loading="lazy"
                            slot="image"
                            src="https://resizing.flixster.com/ugEN_7mCsVg9Gkg7keDMKkW4fUE=/130x187/v2/https://flxt.tmsimg.com/assets/p14382571_b_v12_ag.jpg"
                        />
                        <div slot="caption" data-track="scores">
                            <div class="score-icon-pair">
                                <score-icon-critic
                                    alignment="left"
                                    percentage="74"
                                    size="tiny"
                                    slot="critic-score"
                                    state="fresh"
                                ></score-icon-critic>
                                <score-icon-audience
                                    alignment="left"
                                    percentage="73"
                                    size="tiny"
                                    slot="audience-score"
                                    state="upright"
                                ></score-icon-audience>
                            </div>
                            <span class="p--small">Will &amp; Grace</span>
                        </div>
                    </tile-dynamic>
                </a>
            </tiles-carousel-responsive-item>
        
            <tiles-carousel-responsive-item slot="tile">
                <a href="/tv/poldark">
                    <tile-dynamic>
                        <img
                            alt="Poldark poster image"
                            loading="lazy"
                            slot="image"
                            src="https://resizing.flixster.com/bR89nZyQ5dDFN52PWNFlw9TEPXQ=/130x187/v2/https://flxt.tmsimg.com/assets/p11546269_b_v13_ax.jpg"
                        />
                        <div slot="caption" data-track="scores">
                            <div class="score-icon-pair">
                                <score-icon-critic
                                    alignment="left"
                                    percentage="89"
                                    size="tiny"
                                    slot="critic-score"
                                    state="fresh"
                                ></score-icon-critic>
                                <score-icon-audience
                                    alignment="left"
                                    percentage="79"
                                    size="tiny"
                                    slot="audience-score"
                                    state="upright"
                                ></score-icon-audience>
                            </div>
                            <span class="p--small">Poldark</span>
                        </div>
                    </tile-dynamic>
                </a>
            </tiles-carousel-responsive-item>
        
            <tiles-carousel-responsive-item slot="tile">
                <a href="/tv/parks_and_recreation">
                    <tile-dynamic>
                        <img
                            alt="Parks and Recreation poster image"
                            loading="lazy"
                            slot="image"
                            src="https://resizing.flixster.com/JQptrNs5AMU5uN0p7CNCJCN8WwQ=/130x187/v2/https://flxt.tmsimg.com/assets/p194833_b_v8_ae.jpg"
                        />
                        <div slot="caption" data-track="scores">
                            <div class="score-icon-pair">
                                <score-icon-critic
                                    alignment="left"
                                    percentage="93"
                                    size="tiny"
                                    slot="critic-score"
                                    state="fresh"
                                ></score-icon-critic>
                                <score-icon-audience
                                    alignment="left"
                                    percentage="89"
                                    size="tiny"
                                    slot="audience-score"
                                    state="upright"
                                ></score-icon-audience>
                            </div>
                            <span class="p--small">Parks and Recreation</span>
                        </div>
                    </tile-dynamic>
                </a>
            </tiles-carousel-responsive-item>
        
            <tiles-carousel-responsive-item slot="tile">
                <a href="/tv/gilmore-girls">
                    <tile-dynamic>
                        <img
                            alt="Gilmore Girls poster image"
                            loading="lazy"
                            slot="image"
                            src="https://resizing.flixster.com/sKylaqYQMPRJoSxuhz-CQJMzNsk=/130x187/v2/https://flxt.tmsimg.com/assets/p184655_b_v10_av.jpg"
                        />
                        <div slot="caption" data-track="scores">
                            <div class="score-icon-pair">
                                <score-icon-critic
                                    alignment="left"
                                    percentage="86"
                                    size="tiny"
                                    slot="critic-score"
                                    state="fresh"
                                ></score-icon-critic>
                                <score-icon-audience
                                    alignment="left"
                                    percentage="86"
                                    size="tiny"
                                    slot="audience-score"
                                    state="upright"
                                ></score-icon-audience>
                            </div>
                            <span class="p--small">Gilmore Girls</span>
                        </div>
                    </tile-dynamic>
                </a>
            </tiles-carousel-responsive-item>
        

        <button slot="scroll-right">
            <rt-icon slot="icon-arrow-right" image icon="right-chevron"></rt-icon>
        </button>
    </tiles-carousel-responsive>
</section>

                
                
                <profile-watchlist-manager>
                    <script type="application/json" id="ratingData">{"ratingMediaInfo":{"emsId":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","mediaType":"TvSeries"},"wantToSeeData":{"wantToSeeCount":0,"ratingsStartDate":"1994-09-22"}}</script>
                </profile-watchlist-manager>
                <section id="rate-and-review-widget" class="rate-and-review-widget__module" data-qa="section:rate-and-review">
                  <h2>Rate And Review</h2>
                  <div 
                    class="wts-ratings-group tvSeries-wts-ratings"
                    data-ProfileWatchlistManager="wtsRatingsGroup"
                  >
                    <div class="wts-button__container">
                        <button  
                            class="button--wts"
                            data-ProfileWatchlistManager="wtsButton:click"
                            type="button"
                        >
                            Want to see
                            <span class="wts-btn__rating-count" data-ProfileWatchlistManager="wtsCount"></span>
                        </button>
                    </div>
                  </div>
                </section>
        
                
    <section id="videos-carousel" data-qa="section:videos-carousel">
        <h2 data-qa="videos-section-title"><em>Friends</em> videos</h2>
		
        <tiles-carousel-responsive
			data-VideosCarouselManager="carousel"
			skeleton="panel"
			slot="carousel"
			data-qa="videos-carousel"
		>
			<rt-button shape="circle" slot="scroll-left" theme="light" data-qa="carousel-left-btn">
				<rt-icon icon="left-arrow-stem" image></rt-icon>
			</rt-button>

            
                <tiles-carousel-responsive-item slot="tile" data-qa="video-item">
                    <tile-dynamic
						isvideo
                        orientation="landscape"
						data-qa="video-item-tile"
                    >
						<img
							alt="Which &#39;Friends&#39; Character is the Ultimate Best Friend?"
							class="fallback"
							loading="lazy"
							slot="image"
							src="https://resizing.flixster.com/-9ZeN32C8MjlgorwlRjIVtuum3A=/270x160/v2/https://statcdn.fandango.com/MPX/image/NBCU_Fandango/403/143/thumb_39436E4C-9BEA-4F56-A066-568DD1001435.jpg"
							data-qa="video-trailer-image"
						/>

                        <button
							class="transparent unset"
							data-ems-id="ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf"
							data-mpx-id="1961074243724"
							data-public-id="Z71mVteuz5rO"
							data-type="TvSeries"
                            data-VideoPlayerOverlayManager="btnVideo:click"
							slot="imageAction"
							data-qa="video-trailer-play-btn"
                        >
                            <span class="sr-only">Which &#39;Friends&#39; Character is the Ultimate Best Friend?</span>
                        </button>
                        
						<div slot="caption">
							<span class="p--small" data-qa="video-item-title" >Which &#39;Friends&#39; Character is the Ultimate Best Friend?</span>
						</div>

						<rt-badge
							class="p--small" 
							slot="imageInsetLabel" 
							theme="gray"
						>
							 58:45
						</rt-badge>
					</tile-dynamic>
                </tiles-carousel-responsive-item>
            

			<rt-button shape="circle" slot="scroll-right" theme="light" data-qa="carousel-right-btn">
				<rt-icon icon="right-arrow-stem" image></rt-icon>
			</rt-button>
        </tiles-carousel-responsive>

        <div class="link-wrap">
            <a data-qa="videos-view-all-link" href="/tv/friends/videos">View All Videos</a>
		</div>
    </section>

        
                
    
    <section id="photos-carousel" data-qa="photos-section">
        <h2 class="header" data-qa="photos-section-title"><em>Friends</em> Photos</h2>
        <div class="content">
            <div id="photos-carousel-root" data-qa="photos-carousel">
                <div class="Carousel PhotosCarousel">
                
                    <div id="0" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt=""
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/VacHGiODC1AFBT21Axu1kq0MkO8=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_b_h9_ac.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="1" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt=""
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/oQfFjEbTJJSY1WElEplt1bGZyxc=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_b_v9_ac.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="2" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt=""
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/QZFwsyiCBqsRhd9PEHSRkYtNawA=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_b_v8_ac.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="3" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt=""
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/Rm02YiZsvHOhLejSt7LzGBeVgt4=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_b_h10_af.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="4" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Matt LeBlanc, Courteney Cox Arquette and Matthew Perry (top row, from left); David Schwimmer, Lisa Kudrow and Jennifer Aniston (bottom row, from left)"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/N4LDuxEQ7tS_OAndI7YAApgP5-M=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_ce_h9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="5" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Friends"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/baBfTLlbulKqG2b89VZLgKyyh7E=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_i_h9_af.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="6" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Friends"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/IgQq62Ox3b7PoOQeKWOEEukPwXg=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_i_v9_ag.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="7" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Friends"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/qwzwsIBtrG8kL-Ih4FFDpVtI7gs=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_i_v8_ag.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="8" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Friends"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/eXL_NAxeWABfJdFinmff14sX0Y8=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_i_h8_ag.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="9" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt=""
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/UfrI_ObJnWgjkkvyuIed0jsNMuc=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_l_h9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="10" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Jennifer Aniston as Rachel Green"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/STu9ugEIj-Ec0Hdit-uLA3fApr4=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_n30905_cc_v9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="11" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Matt LeBlanc as Joey Tribbiani"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/PDwRmoM5lAE8veX7Km9n8QeKMTQ=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_n44345_cc_v9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="12" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Matthew Perry as Chandler Bing"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/KP764SjtbFu-J181RTGkJAa8xHo=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_n44418_cc_v9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="13" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="David Schwimmer as Ross Geller"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/fZWGR1pSR89hgrNsph8JbLaShpI=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_n67980_cc_v9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="14" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Lisa Kudrow as Phoebe Buffay"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/cbnut5yTqzH913y5AQOLG0ve2fk=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_n67988_cc_v9_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                    <div id="15" class="preload">
                        <div class="PhotosCarousel__item">
                            <a class="PhotosCarousel__item-link" data-qa="photo-link">
                                <img
                                    alt="Courteney Cox Arquette as Monica Geller Bing"
                                    class="PhotosCarousel__image"
                                    data-qa="photos-carousel-img"
                                    loading="lazy"
                                    src="https://resizing.flixster.com/H4FN91iZI3w8foRTeggdpckrZHw=/300x300/v2/https://flxt.tmsimg.com/assets/p183931_n167977_cc_v3_aa.jpg"
                                >
                            </a>
                        </div>
                    </div>
                
                </div>
                <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true" style="" data-qa="photos-modal">
    <div class="pswp__bg"></div>
    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>
        <div class="pswp__ui pswp__ui--hidden"><!-- pswp__ui--fit  -->
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>
                <button class="pswp__button pswp__button--close" title="Close (Esc)" data-qa="photos-modal-close-btn"></button>
                <button class="pswp__button pswp__button--share pswp__element--disabled" title="Share"></button>
                <button class="pswp__button pswp__button--fs pswp__element--disabled" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>
            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>
            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>

            </div>
            <div class="view-all-wrap">
                <a href="/tv/friends/pictures" data-qa="photos-view-all-link">
                    View All Photos
                </a>
            </div>
        </div>
    </section>


        
                
                <section id="seasons-list" data-qa="section:season-list">
    <h2>Seasons</h2>
    <div class="content">
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s10"
            >
                <season-list-item
                    skeleton
                    consensus="A wedding, babies, and Joey attempting -- and failing -- to speak French! What more could we have asked for from &lt;em&gt;Friends&lt;/em&gt;&#39; tenth and final season?"
                    
                    info="2003, NBC, 17 episodes"
                    posterurl="https://resizing.flixster.com/QIv_9y5zGFuXBCEgXHOn4V2iNqk=/68x102/v2/https://flxt.tmsimg.com/assets/p7892603_b_v10_ad.jpg"
                    seasontitle="Season 10"
                    tomatometerstate="certified-fresh"
                    tomatometerscore="83"
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s09"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="2002, NBC, 24 episodes"
                    posterurl="https://resizing.flixster.com/a8VPykqjXL8jEOk6zczduLCLEuI=/68x102/v2/https://flxt.tmsimg.com/assets/p7892580_b_v10_ap.jpg"
                    seasontitle="Season 9"
                    tomatometerstate="rotten"
                    tomatometerscore="20"
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s08"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="2001, NBC, 24 episodes"
                    posterurl="https://resizing.flixster.com/zoFmADzHc6OTrxdDm1MeLZ21UNw=/68x102/v2/https://flxt.tmsimg.com/assets/p7892602_b_v7_aq.jpg"
                    seasontitle="Season 8"
                    tomatometerstate="fresh"
                    tomatometerscore="100"
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s07"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="2000, NBC, 25 episodes"
                    posterurl="https://resizing.flixster.com/7g8rV484ejTrCPGp3P2jM1xv99U=/68x102/v2/https://flxt.tmsimg.com/assets/p7892579_b_v8_ah.jpg"
                    seasontitle="Season 7"
                    tomatometerstate=""
                    tomatometerscore=""
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s06"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="1999, NBC, 26 episodes"
                    posterurl="https://resizing.flixster.com/esBqEA6zMrXahndDDMwX7arp8Os=/68x102/v2/https://flxt.tmsimg.com/assets/p7892601_b_v8_av.jpg"
                    seasontitle="Season 6"
                    tomatometerstate="fresh"
                    tomatometerscore="100"
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s05"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="1998, NBC, 25 episodes"
                    posterurl="https://resizing.flixster.com/Ox4DE_rCwGl_67WSELZ00Qsx0wQ=/68x102/v2/https://flxt.tmsimg.com/assets/p7892578_b_v8_ap.jpg"
                    seasontitle="Season 5"
                    tomatometerstate="fresh"
                    tomatometerscore="100"
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s04"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="1997, NBC, 24 episodes"
                    posterurl="https://resizing.flixster.com/kPQrMMUKZElE68ekwggEn8BeKko=/68x102/v2/https://flxt.tmsimg.com/assets/p7892600_b_v7_ab.jpg"
                    seasontitle="Season 4"
                    tomatometerstate=""
                    tomatometerscore=""
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link "
                data-qa="season-link"
                href="/tv/friends/s03"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="1996, NBC, 25 episodes"
                    posterurl="https://resizing.flixster.com/UyEpA6FK1MkrswEhW-TTFrZGjJM=/68x102/v2/https://flxt.tmsimg.com/assets/p7892577_b_v8_ab.jpg"
                    seasontitle="Season 3"
                    tomatometerstate=""
                    tomatometerscore=""
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link seasonRemaining"
                data-qa="season-link"
                href="/tv/friends/s02"
            >
                <season-list-item
                    skeleton
                    consensus=""
                    
                    info="1995, NBC, 24 episodes"
                    posterurl="https://resizing.flixster.com/pOXK62TOkiOtjLjLUkwaW1xi4XM=/68x102/v2/https://flxt.tmsimg.com/assets/p7892599_b_v8_ab.jpg"
                    seasontitle="Season 2"
                    tomatometerstate=""
                    tomatometerscore=""
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        
            <a
                class="season-link seasonRemaining"
                data-qa="season-link"
                href="/tv/friends/s01"
            >
                <season-list-item
                    skeleton
                    consensus="&lt;em&gt;Friends&lt;/em&gt;&#39; daffy situations elicit just as many eye-rolls as laughs, but this perky sitcom gets by with a little help from its immensely likable cast."
                    
                    info="1994, NBC, 24 episodes"
                    posterurl="https://resizing.flixster.com/t6JrwcfM1a5YpHF9hnZYu3EUyIE=/68x102/v2/https://resizing.flixster.com/zIdp3BtCIj8qPzXgoFszkvsEDEs=/ems.cHJkLWVtcy1hc3NldHMvdHZzZWFzb24vUlRUVjYxNjczLndlYnA="
                    seasontitle="Season 1"
                    tomatometerstate="fresh"
                    tomatometerscore="71"
                    data-qa="season-item"
                >
                </season-list-item>
            </a>
        

        
            <div id="show-more-wrap">
                <button
                    class="button--outline"
                    data-qa="season-list-show-more-btn"
                    id="showMoreSeasons"
                >
                    Show More Seasons <rt-icon icon="down-open"></rt-icon>
                </button>
            </div>
        
    </div>
</section>

        
                
                    <div id="tv-series-cast">
                        <section id="cast-and-crew" data-qa="section:cast-and-crew">
  <h2>Cast & Crew</h2>
  <div class="content">
      <div class="cast-wrap">
        

        
          

          <div class="cast-and-crew-item " data-qa="cast-crew-item">
    
        <a href="/celebrity/jennifer_aniston" data-qa="cast-item-link">
    
        <img
            alt="Jennifer Aniston"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/WGzSzrvXksHdM3YmF5EdeWsoqnw=/100x120/v2/https://flxt.tmsimg.com/assets/30905_v9_bc.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/jennifer_aniston" data-qa="cast-item-name">
            
                <p class="name">Jennifer Aniston</p>
        
            </a>
        

        
            <p class="character p--xsmall" data-qa="cast-item-character">Rachel Green</p>
        
        
            <p class="credits p--xsmall">Actor</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item " data-qa="cast-crew-item">
    
        <a href="/celebrity/courteney_cox" data-qa="cast-item-link">
    
        <img
            alt="Courteney Cox"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/2Tj1Xmj2U9l3QINHvFlJZNy14yA=/100x120/v2/https://flxt.tmsimg.com/assets/13912_v9_bb.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/courteney_cox" data-qa="cast-item-name">
            
                <p class="name">Courteney Cox</p>
        
            </a>
        

        
            <p class="character p--xsmall" data-qa="cast-item-character">Monica Geller Bing</p>
        
        
            <p class="credits p--xsmall">Actor</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item " data-qa="cast-crew-item">
    
        <a href="/celebrity/lisa_kudrow" data-qa="cast-item-link">
    
        <img
            alt="Lisa Kudrow"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/9KuM7h5UeJJNCSRRYjhDYnLl894=/100x120/v2/https://flxt.tmsimg.com/assets/67988_v9_ba.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/lisa_kudrow" data-qa="cast-item-name">
            
                <p class="name">Lisa Kudrow</p>
        
            </a>
        

        
            <p class="character p--xsmall" data-qa="cast-item-character">Phoebe Buffay</p>
        
        
            <p class="credits p--xsmall">Actor</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item " data-qa="cast-crew-item">
    
        <a href="/celebrity/matt_leblanc" data-qa="cast-item-link">
    
        <img
            alt="Matt LeBlanc"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/3hbtmLuatf1rYBSf6rRv0LrVXiA=/100x120/v2/https://flxt.tmsimg.com/assets/44345_v9_bb.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/matt_leblanc" data-qa="cast-item-name">
            
                <p class="name">Matt LeBlanc</p>
        
            </a>
        

        
            <p class="character p--xsmall" data-qa="cast-item-character">Joey Tribbiani</p>
        
        
            <p class="credits p--xsmall">Actor</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item " data-qa="cast-crew-item">
    
        <a href="/celebrity/matthew_perry" data-qa="cast-item-link">
    
        <img
            alt="Matthew Perry"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/a91Cx3ha7iLHA08ihIyc_35Vd44=/100x120/v2/https://flxt.tmsimg.com/assets/44418_v9_bb.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/matthew_perry" data-qa="cast-item-name">
            
                <p class="name">Matthew Perry</p>
        
            </a>
        

        
            <p class="character p--xsmall" data-qa="cast-item-character">Chandler Bing</p>
        
        
            <p class="credits p--xsmall">Actor</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item " data-qa="cast-crew-item">
    
        <a href="/celebrity/david_schwimmer" data-qa="cast-item-link">
    
        <img
            alt="David Schwimmer"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/6EuOFv1edv_QJvekUKGjKXnw4Z0=/100x120/v2/https://flxt.tmsimg.com/assets/67980_v9_bb.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/david_schwimmer" data-qa="cast-item-name">
            
                <p class="name">David Schwimmer</p>
        
            </a>
        

        
            <p class="character p--xsmall" data-qa="cast-item-character">Ross Geller</p>
        
        
            <p class="credits p--xsmall">Actor</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item js-extra-cast-and-crew moreCasts hide" data-qa="cast-crew-item">
    
        <a href="/celebrity/kevin_s_bright_2" data-qa="cast-item-link">
    
        <img
            alt="Kevin Bright"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/PFx_f_shML_xlljPsM3qHeTgTsg=/100x120/v2/https://flxt.tmsimg.com/assets/298231_v9_ba.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/kevin_s_bright_2" data-qa="cast-item-name">
            
                <p class="name">Kevin Bright</p>
        
            </a>
        

        
        
            <p class="credits p--xsmall">Executive Producer</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item js-extra-cast-and-crew moreCasts hide" data-qa="cast-crew-item">
    
        <a href="/celebrity/david_crane_6" data-qa="cast-item-link">
    
        <img
            alt="David Crane"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/qaCfqZLwyM9Fqo1yt5aJXCvaHPw=/100x120/v2/https://flxt.tmsimg.com/assets/75490_v9_bb.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/david_crane_6" data-qa="cast-item-name">
            
                <p class="name">David Crane</p>
        
            </a>
        

        
        
            <p class="credits p--xsmall">Executive Producer</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item js-extra-cast-and-crew moreCasts hide" data-qa="cast-crew-item">
    
        <a href="/celebrity/greg_malins" data-qa="cast-item-link">
    
        <img
            alt="Greg Malins"
            class=""
            loading="lazy"
            src="https://resizing.flixster.com/svLAlP3zOIFnSQt7euoBwVVwIdk=/100x120/v2/https://flxt.tmsimg.com/assets/293248_v9_aa.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/greg_malins" data-qa="cast-item-name">
            
                <p class="name">Greg Malins</p>
        
            </a>
        

        
        
            <p class="credits p--xsmall">Executive Producer</p>
        
    </div>
</div>

        
          

          <div class="cast-and-crew-item js-extra-cast-and-crew moreCasts hide" data-qa="cast-crew-item">
    
        <a href="/celebrity/wil_calhoun" data-qa="cast-item-link">
    
        <img
            alt="Wil Calhoun"
            class=""
            loading="lazy"
            src="https://images.fandango.com/cms/assets/b0cefeb0-b6a8-11ed-81d8-51a487a38835--poster-default-thumbnail.jpg"
            data-qa="cast-item-img"
        />
    
        </a>
    
    <div class="metadata">
        
            <a href="/celebrity/wil_calhoun" data-qa="cast-item-name">
            
                <p class="name">Wil Calhoun</p>
        
            </a>
        

        
        
            <p class="credits p--xsmall">Executive Producer</p>
        
    </div>
</div>

        
      </div>
      
      
        <div class="view-all-wrap">
            <button
                class="button--link unset" 
                id="showMoreCast"
                data-qa="cast-and-crew-show-more"
            >
                Show all Cast & Crew <rt-icon icon="down-open"></rt-icon>
            </button>
        </div>      
    
  </div>
</section>
                    </div>
                

                
                
    <section id="news-and-interviews" data-qa="section:news-and-interviews">
        <h2 data-qa="news-and-interviews-title">News &amp; Interviews for <em>Friends</em></h2>
        <div class="content">
            <div class="articles-wrap">
                
                    
                        <div class="article">
                            <a class="unset" href="https://editorial.rottentomatoes.com/article/the-best-tv-theme-songs-of-the-past-25-years/" data-qa="article-link">
                                <img
                                    alt="The Best TV Theme Songs of the Past 25 Years news thumbnail image"
                                    class="newsPhoto"
                                    loading="lazy"
                                    src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/05/12083156/Screen-Shot-2023-05-12-at-8.31.43-AM.png"
                                />
                                <p>The Best TV Theme Songs of the Past 25 Years</p>
                            </a>
                        </div>
                    
                
                    
                        <div class="article">
                            <a class="unset" href="https://editorial.rottentomatoes.com/article/the-biggest-and-best-tv-streaming-series-of-the-last-25-years/" data-qa="article-link">
                                <img
                                    alt="The Biggest and Best TV &#038; Streaming Series of the Last 25 Years news thumbnail image"
                                    class="newsPhoto"
                                    loading="lazy"
                                    src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2023/03/17215553/RT25_TV-streaming-article_600x314.jpg"
                                />
                                <p>The Biggest and Best TV &#038; Streaming Series of the Last 25 Years</p>
                            </a>
                        </div>
                    
                
                    
                        <div class="article">
                            <a class="unset" href="https://editorial.rottentomatoes.com/article/2021-fall-tv-first-look-the-wonder-years-remake-and-more-dick-wolf-drama-more-tv-news/" data-qa="article-link">
                                <img
                                    alt="2021 Fall TV First Look: <em>The Wonder Years</em> Remake and Lots of Dick Wolf Drama Ahead news thumbnail image"
                                    class="newsPhoto"
                                    loading="lazy"
                                    src="https://prd-rteditorial.s3.us-west-2.amazonaws.com/wp-content/uploads/2021/05/21153434/wonder-years-family-600x314.jpg"
                                />
                                <p>2021 Fall TV First Look: <em>The Wonder Years</em> Remake and Lots of Dick Wolf Drama Ahead</p>
                            </a>
                        </div>
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
                    
                
            </div>

            <div class="view-all-wrap">
                <a href="https://editorial.rottentomatoes.com/more-related-content?relatedtvseriesid=ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf" data-qa="news-and-interviews-view-all-link">
                    <p>View All <em>Friends</em> News</p>
                </a>
            </div>
        </div>
    </section>


        
                
            </div>
    
            <aside id="sidebar" class="layout__column layout__column--sidebar">
                <div id="ad-sidebar">
                    <ad-unit hidden unitdisplay="desktop" unittype="topmulti" showadlink>
                        <div slot="adInject"></div>
                    </ad-unit>
                </div>
            </aside>
        </div>

        <script id="curation-json" type="application/json">{"emsId":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","rtId":"2062","rtIdTvss":"2062","type":"tvSeries"}</script>


        <overlay-base
            data-JwPlayerManager="overlayBase:close"
            data-VideoPlayerOverlayManager="overlayBase:close"
            hidden
        >
            <video-player-overlay class="video-overlay-wrap" slot="content" data-qa="video-overlay">
                <div slot="header">
                    <button
                        class="unset transparent"
                        data-VideoPlayerOverlayManager="btnOverlayClose:click"
                        data-qa="video-close-btn"
                    >
                        <rt-icon icon="close">
                            <span class="sr-only">Close video</span>
                        </rt-icon>
                    </button>
                    <a class="cta-btn header-cta button hide">See Details</a>
                </div>
                
                <div slot="content"></div>
                
                <a slot="footer" class="cta-btn footer-cta button hide">See Details</a>
            </video-player-overlay>
        </overlay-base>

        <video-player-overlay-manager></video-player-overlay-manager>
        <div id="video-overlay-player" hidden></div>

        <jw-player-manager
            data-VideoPlayerOverlayManager="jwPlayerManager:playlistItem,pause,ready,relatedClose,relatedOpen"
        >
        </jw-player-manager>
    </section>

                </div>
            </main>

            <div class="sleaderboard_wrapper hidden-xs mobile-hidden">
                <ad-unit hidden unitdisplay="desktop" unittype="bottombanner">
                    <div slot="adInject" style="margin-left:auto;margin-right:auto;display:inline-block"></div>
                </ad-unit>
            </div>

            <news-letter-manager></news-letter-manager>
<footer class="footer container">
    <div class="footer__content-desktop-block" data-qa="footer:section">
        <div class="footer__content-group">
            <ul class="footer__links-list">
                <li class="footer__links-list-item">
                    <a href="/help_desk" data-qa="footer:link-helpdesk">Help</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="/about" data-qa="footer:link-about">About Rotten Tomatoes</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="/about#whatisthetomatometer" data-qa="footer:link-whats-tmeter">What's the Tomatometer<sup>&reg;</sup>?</a>
                </li>
                <li id="footer-feedback" class="footer__links-list-item">
                    
                </li>
            </ul>
        </div>
        <div class="footer__content-group">
            <ul class="footer__links-list">
                <li class="footer__links-list-item">
                    <a href="/critics/criteria" data-qa="footer:link-critic-submission">Critic Submission</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="/help_desk/licensing" data-qa="footer:link-licensing">Licensing</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://together.nbcuni.com/advertise/?utm_source=rotten_tomatoes&amp;utm_medium=referral&amp;utm_campaign=property_ad_pages&amp;utm_content=footer" target="_blank" rel="noopener" data-qa="footer:link-ads">Advertise With Us</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="//www.fandango.com/careers" target="_blank" rel="noopener" data-qa="footer:link-careers">Careers</a>
                </li>
            </ul>
        </div>
        <div class="footer__content-group footer__newsletter-block">
            <p class="h3 footer__content-group-title"><span class="rt-icon rt-icon__mail footer__newsletter-icon"></span>Join The Newsletter</p>
            <p class="footer__newsletter-copy">Get the freshest reviews, news, and more delivered right to your inbox!</p>
            
                <rt-button data-NewsLetterManager="btnNewsLetter:click">
                    Join The Newsletter
                </rt-button>
                <a data-NewsLetterManager="linkNewsLetter" class= "button footer__newsletter-btn hide" target="_blank" rel="noopener">
                    Join The Newsletter
                </a>
            
        </div>
        <div class="footer__content-group footer__social-block" data-qa="footer:social">
            <p class="h3 footer__content-group-title">Follow Us</p>
            <ul class="footer__links-list list-inline">
                <li class="footer__links-list-item">
                    <a href="https://www.facebook.com/rottentomatoes" aria-label="Facebook" target="_blank" rel="noopener" data-qa="footer:social-fb">
                        <rt-icon icon="facebook-squared"></rt-icon>
                    </a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://twitter.com/rottentomatoes" aria-label="Twitter" target="_blank" rel="noopener" data-qa="footer:social-twitter">
                        <rt-icon icon="twitter"></rt-icon>
                    </a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://www.instagram.com/rottentomatoes/" aria-label="Instagram" target="_blank" rel="noopener" data-qa="footer:social-instagram">
                        <rt-icon icon="instagram"></rt-icon>
                    </a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://www.pinterest.com/rottentomatoes" aria-label="Pinterest" target="_blank" rel="noopener" data-qa="footer:social-pinterest">
                        <rt-icon icon="pinterest"></rt-icon>
                    </a>
                </li>
                <li class="footer__links-list-item">
                    <a href="https://www.youtube.com/user/rottentomatoes" aria-label="YouTube" target="_blank" rel="noopener" data-qa="footer:social-yt">
                        <rt-icon icon="youtube-play"></rt-icon>
                    </a>
                </li>
            </ul>
        </div>
    </div>
    <div class="footer__content-mobile-block" data-qa="mfooter:section">
        <div class="footer__content-group">
            <p class="footer__copyright-legal" data-qa="mfooter:copyright">Copyright &copy; Fandango. All rights reserved.</p>
            
                <rt-button data-NewsLetterManager="btnNewsLetter:click">Join The Newsletter</rt-button>
                <a
                    data-NewsLetterManager="linkNewsLetter"
                    class= "button footer__newsletter-btn hide"
                    target="_blank"
                    rel="noopener"
                >Join The Newsletter</a>
            

            <ul class="footer__links-list list-inline">
                <li class="footer__links-list-item">
                    <a href="//www.fandango.com/policies/privacy-policy" target="_blank" rel="noopener" data-qa="mfooter:link-privacy-policy">
                        Privacy Policy
                    </a>
                </li>
                <li class="footer__links-list-item">
                    <a href="//www.fandango.com/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="mfooter:link-terms-policies">Terms and Policies</a>
                </li>
                <li class="footer__links-list-item">
                    <img src="https://images.fandango.com/cms/assets/266533e0-7afb-11ed-83f2-4f600722b564--privacyoptions.svg" class="footer__ccpa-icon" loading="lazy" alt="CCPA icon" />
                    <!-- OneTrust Cookies Settings button start -->
                    <a href="javascript:void(0)" id="ot-sdk-btn" class="ot-sdk-show-settings mobile">Cookie Settings</a>
                    <!-- OneTrust Cookies Settings button end -->
                </li>
                <li class="footer__links-list-item">
                    <a href="//www.fandango.com/californianotice" target="_blank" rel="noopener" data-qa="mfooter:link-california-notice">California Notice</a>
                </li>
                <li class="footer__links-list-item">
                    <a href="//www.fandango.com/policies/cookies-and-tracking#cookie_management" target="_blank" rel="noopener" data-qa="mfooter:link-adChoices">Ad Choices</a>
                </li>
                <li id="footer-feedback-mobile" class="footer__links-list-item">
                    
                </li>
                <li class="footer__links-list-item">
                    <a href="/faq#accessibility" data-qa="mfooter:link-accessibility">Accessibility</a>
                </li>
            </ul>
        </div>
    </div>
    <div class="footer__copyright">
        <ul class="footer__links-list list-inline list-inline--separator" data-qa="footer:links-list-privacy">
            <li class="footer__links-list-item version" data-qa="footer:version">
                <span>V3.1</span>
            </li>
            <li class="footer__links-list-item">
                <a href="//www.fandango.com/policies/privacy-policy" target="_blank" rel="noopener" data-qa="footer:link-privacy-policy">
                    Privacy Policy
                </a>
            </li>
            <li class="footer__links-list-item">
                <a href="//www.fandango.com/policies/terms-and-policies" target="_blank" rel="noopener" data-qa="footer:link-terms-policies">Terms and Policies</a>
            </li>
            <li class="footer__links-list-item">
                <img src="https://images.fandango.com/cms/assets/266533e0-7afb-11ed-83f2-4f600722b564--privacyoptions.svg" class="footer__ccpa-icon" loading="lazy" alt="CCPA icon" />
                <!-- OneTrust Cookies Settings button start -->
                <a href="javascript:void(0)" id="ot-sdk-btn" class="ot-sdk-show-settings">Cookie Settings</a>
                <!-- OneTrust Cookies Settings button end -->
            </li>
            <li class="footer__links-list-item">
                <a href="//www.fandango.com/californianotice" target="_blank" rel="noopener" data-qa="footer:link-california-notice">California Notice</a>
            </li>
            <li class="footer__links-list-item">
                <a href="//www.fandango.com/policies/cookies-and-tracking#cookie_management" target="_blank" rel="noopener" data-qa="footer:link-adChoices">Ad Choices</a>
            </li>
            <li class="footer__links-list-item">
                <a href="/faq#accessibility" data-qa="footer:link-accessibility">Accessibility</a>
            </li>
        </ul>
        <span class="footer__copyright-legal" data-qa="footer:copyright">Copyright &copy; Fandango. All rights reserved.</span>
    </div>
</footer>

        </div>

        
    
        <script type="text/javascript">
(function (root) {
/* -- Data -- */
root.RottenTomatoes || (root.RottenTomatoes = {});
root.RottenTomatoes.context = {"_routes":{"baseCanonicalUrl":{"path":"https:\u002F\u002Fwww.rottentomatoes.com","tokens":[{"literal":"https:\u002F\u002Fwww.rottentomatoes.com"}]},"webCriticSourceReviewsNapi":{"path":"\u002Fnapi\u002Fcritics\u002Fsource\u002F:publicationId\u002F:type(movies|tv)","tokens":[{"literal":"\u002Fnapi\u002Fcritics\u002Fsource\u002F"},{"key":"publicationId"},{"literal":"\u002F"},{"key":"type"}]},"editorialPageCodeOfConduct":{"path":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fotg-article\u002Fcommunity-code-of-conduct","tokens":[{"literal":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fotg-article\u002Fcommunity-code-of-conduct"}]},"webMovieReviewsNapi":{"path":"\u002Fnapi\u002Fmovie\u002F:emsId\u002Freviews\u002F:type(user|verified_audience|all|top_critics)","tokens":[{"literal":"\u002Fnapi\u002Fmovie\u002F"},{"key":"emsId"},{"literal":"\u002Freviews\u002F"},{"key":"type"}]},"commonTrackingFreewheelPixelSyncNapi":{"path":"\u002Fnapi\u002Ftracking\u002Ffreewheel\u002Fpixelsync","tokens":[{"literal":"\u002Fnapi\u002Ftracking\u002Ffreewheel\u002Fpixelsync"}]},"webEpisodeReviewsNapi":{"path":"\u002Fnapi\u002Fepisode\u002F:emsId\u002Freviews\u002F:type(all|top_critics)","tokens":[{"literal":"\u002Fnapi\u002Fepisode\u002F"},{"key":"emsId"},{"literal":"\u002Freviews\u002F"},{"key":"type"}]},"webSeasonReviewsNapi":{"path":"\u002Fnapi\u002Fseason\u002F:emsId\u002Freviews\u002F:type(user|all|top_critics)","tokens":[{"literal":"\u002Fnapi\u002Fseason\u002F"},{"key":"emsId"},{"literal":"\u002Freviews\u002F"},{"key":"type"}]},"webTvSeasonGetEpisodesNapi":{"path":"\u002Fnapi\u002Ftv\u002F:vanity\u002F:tvSeason\u002Fepisodes","tokens":[{"literal":"\u002Fnapi\u002Ftv\u002F"},{"key":"vanity"},{"literal":"\u002F"},{"key":"tvSeason"},{"literal":"\u002Fepisodes"}]},"commonUserWTSCreateNapi":{"path":"\u002Fnapi\u002Fuser\u002Fwts","tokens":[{"literal":"\u002Fnapi\u002Fuser\u002Fwts"}]},"commonUserWTSDeleteNapi":{"path":"\u002Fnapi\u002Fuser\u002Fwts\u002Fdelete","tokens":[{"literal":"\u002Fnapi\u002Fuser\u002Fwts\u002Fdelete"}]},"commonUserRatingCreateNapi":{"path":"\u002Fnapi\u002Fuser\u002Frating","tokens":[{"literal":"\u002Fnapi\u002Fuser\u002Frating"}]},"commonUserGetWTSNapi":{"path":"\u002Fnapi\u002Fuser\u002Fwts","tokens":[{"literal":"\u002Fnapi\u002Fuser\u002Fwts"}]},"commonUserGetRatingNapi":{"path":"\u002Fnapi\u002Fuser\u002Frating","tokens":[{"literal":"\u002Fnapi\u002Fuser\u002Frating"}]},"webUserProfileMovieRatingsNapi":{"path":"\u002Fnapi\u002FuserProfile\u002FmovieRatings\u002F:userId","tokens":[{"literal":"\u002Fnapi\u002FuserProfile\u002FmovieRatings\u002F"},{"key":"userId"}]},"webUserProfileTVRatingsNapi":{"path":"\u002Fnapi\u002FuserProfile\u002FtvRatings\u002F:userId","tokens":[{"literal":"\u002Fnapi\u002FuserProfile\u002FtvRatings\u002F"},{"key":"userId"}]},"webUserProfileWTSNapi":{"path":"\u002Fnapi\u002FuserProfile\u002Fwts\u002F:userId","tokens":[{"literal":"\u002Fnapi\u002FuserProfile\u002Fwts\u002F"},{"key":"userId"}]},"resetClient":{"path":"\u002Freset-client","tokens":[{"literal":"\u002Freset-client"}]},"userAccount":{"path":"\u002Fuser\u002Faccount","tokens":[{"literal":"\u002Fuser\u002Faccount"}]},"userAccountEmailPrefs":{"path":"https:\u002F\u002Foptout.services.fandango.com\u002Frottentomatoes","tokens":[{"literal":"https:\u002F\u002Foptout.services.fandango.com\u002Frottentomatoes"}]},"redirectorTheatersTopBoxOffice":{"path":"\u002Fbrowse\u002Fin-theaters","tokens":[{"literal":"\u002Fbrowse\u002Fin-theaters"}]},"webCritic":{"path":"\u002Fcritics\u002F:vanity\u002F:type(movies|tv)","tokens":[{"literal":"\u002Fcritics\u002F"},{"key":"vanity"},{"literal":"\u002F"},{"key":"type"}]},"webCriticLanding":{"path":"\u002Fcritics\u002F:vanity","tokens":[{"literal":"\u002Fcritics\u002F"},{"key":"vanity"}]},"webSearchResults":{"path":"\u002Fsearch\u002F","tokens":[{"literal":"\u002Fsearch\u002F"}]},"webShowtimes":{"path":"\u002F\u002Fwww.fandango.com\u002Fmovies-in-theaters","tokens":[{"literal":"\u002F\u002Fwww.fandango.com\u002Fmovies-in-theaters"}]},"webCriticSource":{"path":"\u002Fcritics\u002Fsource\u002F:publicationId","tokens":[{"literal":"\u002Fcritics\u002Fsource\u002F"},{"key":"publicationId"}]}}};
root.RottenTomatoes.context || (root.RottenTomatoes.context = {});
root.RottenTomatoes.context.layout = {"header":{"editorial":{"guides":{"posts":[{"ID":240078,"author":{"ID":789,"username":"debbie.day","name":"Debbie Day","first_name":"Debbie","last_name":"Day","nickname":"debbie.day","slug":"debbie-day","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002Fb2505417e54662e2b022c9bbdeef4f5a?s=96","description":"Senior Editor, TV","registered":"2016-09-06T20:11:17+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F789","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F789\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2023\u002F06\u002F28130158\u002FTopGunMaverick_600x314.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fguide\u002Fmovies-to-watch-july-4\u002F","status":"publish","title":"Movies To Watch July 4th Weekend","type":"guide"},{"ID":114574,"author":{"ID":12,"username":"alex.vo","name":"Alex Vo","first_name":"Alex","last_name":"Vo","nickname":"alex.vo","slug":"alex-vo","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F818ade2039d2a711e0cd70ae46f14952?s=96","description":"","registered":"2015-05-12T20:00:23+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2021\u002F09\u002F29092921\u002FComingtoAmerica.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fguide\u002Fessential-comedy-movies\u002F","status":"publish","title":"150 Essential Comedy Movies To Watch Now","type":"guide"}],"title":"Guides","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fcountdown\u002F"},"hubs":{"posts":[{"ID":233382,"author":{"ID":2,"username":"julio.deoliveira","name":"Julio de Oliveira","first_name":"Julio","last_name":"de Oliveira","nickname":"julio.deoliveira","slug":"julio-deoliveira","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F1cd72379c6e732a765b86ce4aa3c9111?s=96","description":"","registered":"2015-02-02T23:44:26+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F2","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F2\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002F03163756\u002FRT25_Site_600x314.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Frt-hub\u002Frt25\u002F","status":"publish","title":"RT25: Celebrating 25 Years of Rotten Tomatoes","type":"rt-hub"},{"ID":237626,"author":{"ID":12,"username":"alex.vo","name":"Alex Vo","first_name":"Alex","last_name":"Vo","nickname":"alex.vo","slug":"alex-vo","URL":"","avatar":"https:\u002F\u002Fsecure.gravatar.com\u002Favatar\u002F818ade2039d2a711e0cd70ae46f14952?s=96","description":"","registered":"2015-05-12T20:00:23+00:00","meta":{"links":{"self":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12","archives":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwp-json\u002Fusers\u002F12\u002Fposts"}}},"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2023\u002F05\u002F04130548\u002FRT_WTW_Generic_2023_Thumbnail_600x314_021623.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Frt-hub\u002Fwhat-to-watch\u002F","status":"publish","title":"What to Watch: In Theaters and On Streaming","type":"rt-hub"}],"title":"Hubs","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Frt-hubs\u002F"},"news":{"posts":[{"ID":240202,"author":7,"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2023\u002F04\u002F08162316\u002Ftwisted-metal-10-600x314-1.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fthe-most-anticipated-tv-streaming-shows-of-july-2023\u002F","promo_order":"","status":"publish","title":"The Most Anticipated TV &#038; Streaming Shows of July 2023","type":"article"},{"ID":240174,"author":800,"featured_image":{"source":"https:\u002F\u002Fprd-rteditorial.s3.us-west-2.amazonaws.com\u002Fwp-content\u002Fuploads\u002F2023\u002F04\u002F25091715\u002FheWitcherS3_keyart-600x314-1.jpg"},"link":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fthe-witcher-cast-on-season-3\u002F","promo_order":"","status":"publish","title":"\u003Cem\u003EThe Witcher\u003C\u002Fem\u003E Cast on Season 3 Shocks and Twists (So Far)","type":"article"}],"title":"RT News","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fnews\u002F"}},"trendingTarsSlug":"rt-nav-trending","trending":[{"header":"Indiana Jones Reviews","url":"https:\u002F\u002Fwww.rottentomatoes.com\u002Fm\u002Findiana_jones_and_the_dial_of_destiny\u002Freviews?intcmp=rt-scorecard_tomatometer-reviews"},{"header":"July 4th Movies","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fguide\u002Fmovies-to-watch-july-4\u002F"},{"header":"The Witcher First Reviews","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Farticle\u002Fthe-witcher-season-3-first-reviews\u002F"},{"header":"Marvel Movies In Order","url":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fguide\u002Fmarvel-movies-in-order\u002F"},{"header":"Nimona ","url":"https:\u002F\u002Fwww.rottentomatoes.com\u002Fm\u002Fnimona"}],"certifiedMedia":{"certifiedFreshTvSeason":{"header":null,"media":{"url":"\u002Ftv\u002Fhijack\u002Fs01","name":"Hijack: Season 1","score":91,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002FZfGkQ_EOQgaLdTVjWf130tW86f0=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002Fln9uAL_MIZsUlH-ZAf2uwwVse1U=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp24706013_b_v13_aa.jpg"},"tarsSlug":"rt-nav-list-cf-picks"},"certifiedFreshMovieInTheater":{"header":null,"media":{"url":"\u002Fm\u002Fasteroid_city","name":"Asteroid City","score":74,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002F8nfcW2rNwCv3mQHfEHWQMS0O8pw=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FEzQJmsAVWaaiahVMRaZPWeIbgBQ=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FN1dnUvL2FS7F9x090K-NlJXr-p4=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzMyNzc2ODYwLTJlMjYtNDgzNi05MmIwLWNiOTgzYzA4YjU0MC5qcGc="}},"certifiedFreshMovieInTheater4":{"header":null,"media":{"url":"\u002Fm\u002Fthe_blackening","name":"The Blackening","score":86,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002Fd1PD9ADBcdqPL_LtDaTqOEGQGqU=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FwW3lNvKxcvGZU3AsKCmj2vB1ZBo=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002F1jupVYBDpms7_nG9gpfVjcZqhHA=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzYxOTE0Yjg4LWEwMDQtNDM3ZS04NGRhLTYyMmE1NDEyZWY0Yy5qcGc="}},"certifiedFreshMovieAtHome":{"header":null,"media":{"url":"\u002Fm\u002Fnimona","name":"Nimona","score":93,"posterImg":"https:\u002F\u002Fresizing.flixster.com\u002FFTrRb7yPov2bMNOKGQK-npep644=\u002F206x305\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002Fg6-ePdIQgPhNBou9uw0SKn8FNys=\u002Ffit-in\u002F180x240\u002Fv2\u002Fhttps:\u002F\u002Fresizing.flixster.com\u002FPjEtd6YyyI56iFO2emBjqf6Y99A=\u002Fems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzI4OGNiZjBhLTZkN2ItNGNmOS1iMDhlLTdhNTJmODNhMmQxYy5qcGc="}},"tarsSlug":"rt-nav-list-cf-picks"},"tvLists":{"newTvTonight":{"tarsSlug":"rt-hp-text-list-new-tv-this-week","title":"New TV Tonight","shows":[{"title":"Warrior: Season 3","tomatometer":{"tomatometer":100,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fwarrior_2019\u002Fs03"},{"title":"Hijack: Season 1","tomatometer":{"tomatometer":91,"state":"certified_fresh","certifiedFresh":true},"tvPageUrl":"\u002Ftv\u002Fhijack\u002Fs01"},{"title":"The Gold: Season 1","tomatometer":{"tomatometer":86,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fthe_gold\u002Fs01"},{"title":"Tom Clancy's Jack Ryan: Season 4","tomatometer":{"tomatometer":86,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fjack_ryan\u002Fs04"},{"title":"The Witcher: Season 3","tomatometer":{"tomatometer":82,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fthe_witcher\u002Fs03"},{"title":"grown-ish: Season 6","tomatometer":{"tomatometer":null,"state":"","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fgrown_ish\u002Fs06"},{"title":"Cannes Confidential: Season 1","tomatometer":{"tomatometer":null,"state":"","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fcannes_confidential\u002Fs01"},{"title":"Ten-Year-Old Tom: Season 2","tomatometer":{"tomatometer":null,"state":"","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Ften_year_old_tom\u002Fs02"},{"title":"The Bachelorette: Season 20","tomatometer":{"tomatometer":null,"state":"","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fthe_bachelorette\u002Fs20"},{"title":"Secret Chef: Season 1","tomatometer":{"tomatometer":null,"state":"","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fsecret_chef\u002Fs01"}]},"mostPopularTvOnRt":{"tarsSlug":"rt-hp-text-list-most-popular-tv-on-rt","title":"Most Popular TV on RT","shows":[{"title":"The Witcher: Season 3","tomatometer":{"tomatometer":82,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fthe_witcher\u002Fs03"},{"title":"The Idol: Season 1","tomatometer":{"tomatometer":22,"state":"rotten","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fthe_idol\u002Fs01"},{"title":"The Bear: Season 2","tomatometer":{"tomatometer":100,"state":"certified_fresh","certifiedFresh":true},"tvPageUrl":"\u002Ftv\u002Fthe_bear\u002Fs02"},{"title":"Secret Invasion: Season 1","tomatometer":{"tomatometer":63,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fsecret_invasion\u002Fs01"},{"title":"Hijack: Season 1","tomatometer":{"tomatometer":91,"state":"certified_fresh","certifiedFresh":true},"tvPageUrl":"\u002Ftv\u002Fhijack\u002Fs01"},{"title":"Warrior: Season 3","tomatometer":{"tomatometer":100,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fwarrior_2019\u002Fs03"},{"title":"The Crowded Room: Season 1","tomatometer":{"tomatometer":31,"state":"rotten","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fthe_crowded_room\u002Fs01"},{"title":"Silo: Season 1","tomatometer":{"tomatometer":88,"state":"certified_fresh","certifiedFresh":true},"tvPageUrl":"\u002Ftv\u002Fsilo\u002Fs01"},{"title":"Black Mirror: Season 6","tomatometer":{"tomatometer":77,"state":"fresh","certifiedFresh":false},"tvPageUrl":"\u002Ftv\u002Fblack_mirror\u002Fs06"}]}},"legacyItems":{"tarsSlug":"rt-nav-list-tv-episodic-reviews","tv":{"mediaLists":[{},{},{},{"title":"Episodic Reviews","shows":[{"link":"\u002Ftv\u002Fyellowjackets\u002Fs02","showTitle":"Yellowjackets: Season 2"},{"link":"\u002Ftv\u002Fsuccession\u002Fs04","showTitle":"Succession: Season 4"},{"link":"\u002Ftv\u002Fbeef\u002Fs01","showTitle":"Beef: Season 1"},{"link":"\u002Ftv\u002Fthe_mandalorian\u002Fs03","showTitle":"The Mandalorian: Season 3"},{"link":"\u002Ftv\u002Frabbit_hole\u002Fs01","showTitle":"Rabbit Hole: Season 1"}]}]}}},"links":{"moviesInTheaters":{"certifiedFresh":"\u002Fbrowse\u002Fcf-in-theaters","comingSoon":"\u002Fbrowse\u002Fupcoming","openingThisWeek":"\u002Fbrowse\u002Fopening","title":"\u002Fbrowse\u002Fin-theaters","topBoxOffice":"\u002Fbrowse\u002Fin-theaters"},"onDvdAndStreaming":{"all":"\u002Fbrowse\u002Fdvd-streaming-all","certifiedFresh":"\u002Fbrowse\u002Fcf-dvd-streaming-all","title":"\u002Fdvd","top":"\u002Fbrowse\u002Ftop-dvd-streaming"},"moreMovies":{"topMovies":"\u002Ftop","trailers":"\u002Ftrailers"},"tvTonight":"\u002Fbrowse\u002Ftv-list-1","tvPopular":"\u002Fbrowse\u002Ftv-list-2","moreTv":{"topTv":"https:\u002F\u002Fwww.rottentomatoes.com\u002Ftop-tv","certifiedFresh":"\u002Fbrowse\u002Ftv-list-3"},"editorial":{"allTimeLists":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fall-time-lists\u002F","bingeGuide":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fbinge-guide\u002F","comicsOnTv":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fcomics-on-tv\u002F","countdown":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fcountdown\u002F","fiveFavoriteFilms":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Ffive-favorite-films\u002F","videoInterviews":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fvideo-interviews\u002F","weekendBoxOffice":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fweekend-box-office\u002F","weeklyKetchup":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fweekly-ketchup\u002F","whatToWatch":"https:\u002F\u002Feditorial.rottentomatoes.com\u002Fwhat-to-watch\u002F"}}};
root.RottenTomatoes.thirdParty = {"chartBeat":{"auth":"64558","domain":"rottentomatoes.com"},"mpx":{"accountPid":"NGweTC","playerPid":"y__7B0iQTi4P","playerPidPDK6":"pdk6_y__7B0iQTi4P","accountId":"2474312077"},"algoliaSearch":{"aId":"79FRDP12PN","sId":"175588f6e5f8319b27702e4cc4013561"},"cognito":{"upId":"us-west-2_4L0ZX4b1U","clientId":"7pu48v8i2n25t4vhes0edck31c"}};
root.RottenTomatoes.serviceWorker = {"isServiceWokerOn":true};
root.__RT__ || (root.__RT__ = {});
root.__RT__.featureFlags = {"adsCarouselActiveName":"rt-sponsored-carousel-list","adsCarouselHP":true,"adsCarouselOP":false,"adsHub":false,"adsMockDLP":false,"adsVideoSpotlightHP":false,"authVerboseLogs":false,"disableFeatureDetection":true,"disableReviewSubmission":false,"franchisePicturesOptimized":false,"layoutsMoviePage":true,"layoutsMovieReviewsPage":true,"layoutsTvEpisodePage":true,"layoutsTvEpisodeReviewsPage":true,"layoutsTvSeasonPage":true,"layoutsTvSeasonReviewsPage":true,"layoutsTvSeriesPage":true,"layoutsUserProfilePage":false,"legacyBridge":true,"logoRT25":true,"modelsPicturesPages":true,"mopUseEMSCriticService":false,"newPreferenceCenterEnabled":true,"profilesRedesignEnabled":true,"scoreIntroCard":false,"showVerification":false,"userPollingEnabled":true,"videoJWP":true};
root.RottenTomatoes.dtmData = {"webVersion":"node","rtVersion":3,"loggedInStatus":"","customerId":"","emsID":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","pageName":"rt | tv | overview | Friends","titleGenre":"Comedy","titleId":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","titleName":"Friends","titleType":"Tv"};
root.RottenTomatoes.context.adsMockDLP = false;
root.RottenTomatoes.context.disableFeatureDetection = true;
root.RottenTomatoes.context.req = {"params":{"vanity":"friends"},"queries":{},"route":{},"url":"\u002Ftv\u002Ffriends","secure":false,"buildVersion":undefined};
root.RottenTomatoes.context.config = {};
root.RottenTomatoes.context.tvSeriesId = "ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf";
root.RottenTomatoes.context.gptSite = "tv";
root.BK = {"PageName":"http:\u002F\u002Fwww.rottentomatoes.com\u002Ftv\u002Ffriends","SiteID":37528,"SiteSection":"tv","TvSeriesId":"ac4422e6-5ad6-3ef1-98c6-4859b41a0bcf","TvSeriesTitle":"Friends"};
root.RottenTomatoes.context.imagesJson = [{"aspectRatio":"ASPECT_RATIO_4_3","caption":undefined,"category":"BANNER","height":"1080","id":0,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002FsrB0aXFfxsoXDjv13Wke1Dit9aI=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_h9_ac.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FVacHGiODC1AFBT21Axu1kq0MkO8=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_h9_ac.jpg"},"width":"1440"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":undefined,"category":"BANNER","height":"1440","id":1,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002F3nTuH9RcKcAF7OJf2qN7GfCMXZY=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_v9_ac.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FoQfFjEbTJJSY1WElEplt1bGZyxc=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_v9_ac.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_2_3","caption":undefined,"category":"BANNER","height":"1440","id":2,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002F40wB3rriWzPFvBw_CFZpNraw0Sc=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_v8_ac.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FQZFwsyiCBqsRhd9PEHSRkYtNawA=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_v8_ac.jpg"},"width":"960"},{"aspectRatio":"ASPECT_RATIO_16_9","caption":undefined,"category":"BANNER","height":"1080","id":3,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002FyNt_MX40SOIUJQAJEvaK-uAZAY4=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_h10_af.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FRm02YiZsvHOhLejSt7LzGBeVgt4=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_b_h10_af.jpg"},"width":"1920"},{"aspectRatio":"ASPECT_RATIO_4_3","caption":"Matt LeBlanc, Courteney Cox Arquette and Matthew Perry (top row, from left); David Schwimmer, Lisa Kudrow and Jennifer Aniston (bottom row, from left)","category":"CAST_ENSEMBLE","height":"1080","id":4,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002Fk3jyokXLJQjtQlsxb-sXW2N4sK4=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_ce_h9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FN4LDuxEQ7tS_OAndI7YAApgP5-M=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_ce_h9_aa.jpg"},"width":"1440"},{"aspectRatio":"ASPECT_RATIO_4_3","caption":"Friends","category":"ICONIC","height":"1080","id":5,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002Flvfuhi2ovunVBObwqniA8I46Eb0=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_h9_af.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FbaBfTLlbulKqG2b89VZLgKyyh7E=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_h9_af.jpg"},"width":"1440"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"Friends","category":"ICONIC","height":"1440","id":6,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002F4hgI6If8Ii5jKBHdphrftAK59OI=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_v9_ag.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FIgQq62Ox3b7PoOQeKWOEEukPwXg=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_v9_ag.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_2_3","caption":"Friends","category":"ICONIC","height":"1440","id":7,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002F-0dkciy323ektiUQjcm1l2FfEhM=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_v8_ag.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FqwzwsIBtrG8kL-Ih4FFDpVtI7gs=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_v8_ag.jpg"},"width":"960"},{"aspectRatio":"ASPECT_RATIO_16_9","caption":"Friends","category":"ICONIC","height":"2160","id":8,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002FZbnK7oQKSmCUe_nP817PplRBK7o=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_h8_ag.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FeXL_NAxeWABfJdFinmff14sX0Y8=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_i_h8_ag.jpg"},"width":"3840"},{"aspectRatio":"ASPECT_RATIO_4_3","caption":undefined,"category":"LOGO","height":"1080","id":9,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002Fz95VPc0J29THPVplG8MaDsD7UoQ=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_l_h9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FUfrI_ObJnWgjkkvyuIed0jsNMuc=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_l_h9_aa.jpg"},"width":"1440"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"Jennifer Aniston as Rachel Green","category":"CAST_IN_CHARACTER","height":"1440","id":10,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002F0DeFMG6i-Tu2ufYP3b5PrkG1pGA=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n30905_cc_v9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FSTu9ugEIj-Ec0Hdit-uLA3fApr4=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n30905_cc_v9_aa.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"Matt LeBlanc as Joey Tribbiani","category":"CAST_IN_CHARACTER","height":"1440","id":11,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002Fn6lRJmi8ALKtI4gR2SyTApk3H2E=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n44345_cc_v9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FPDwRmoM5lAE8veX7Km9n8QeKMTQ=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n44345_cc_v9_aa.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"Matthew Perry as Chandler Bing","category":"CAST_IN_CHARACTER","height":"1440","id":12,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002FYDY4SGMf-_Q5x0R8bOujoKNsxms=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n44418_cc_v9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FKP764SjtbFu-J181RTGkJAa8xHo=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n44418_cc_v9_aa.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"David Schwimmer as Ross Geller","category":"CAST_IN_CHARACTER","height":"1440","id":13,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002FhYKORHzL5-GF3x2e2RR559ZunOo=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n67980_cc_v9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FfZWGR1pSR89hgrNsph8JbLaShpI=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n67980_cc_v9_aa.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"Lisa Kudrow as Phoebe Buffay","category":"CAST_IN_CHARACTER","height":"1440","id":14,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002FpDEJC18gdQAsIEcgKyEgHLu6AA8=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n67988_cc_v9_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002Fcbnut5yTqzH913y5AQOLG0ve2fk=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n67988_cc_v9_aa.jpg"},"width":"1080"},{"aspectRatio":"ASPECT_RATIO_3_4","caption":"Courteney Cox Arquette as Monica Geller Bing","category":"CAST_IN_CHARACTER","height":"360","id":15,"urls":{"fullscreen":"https:\u002F\u002Fresizing.flixster.com\u002Ff5YU1qiaaH1UWk_926wEMhNYo6I=\u002Ffit-in\u002F1152x864\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n167977_cc_v3_aa.jpg","thumbnail":"https:\u002F\u002Fresizing.flixster.com\u002FH4FN91iZI3w8foRTeggdpckrZHw=\u002F300x300\u002Fv2\u002Fhttps:\u002F\u002Fflxt.tmsimg.com\u002Fassets\u002Fp183931_n167977_cc_v3_aa.jpg"},"width":"270"}];
}(this));
</script>

        <!--[if IE]>
        <script src="/assets/pizza-pie/javascripts/roma/common/polyfills.js"></script>
        <![endif]-->

        <script src="/assets/pizza-pie/javascripts/bundles/roma/vendors.37d2b700cb6.js"></script>

        
            <script src="/assets/pizza-pie/javascripts/bundles/roma/micromodal.08e6802de37.js"></script>
        

        <script src="/assets/pizza-pie/javascripts/bundles/roma/templates.44fb88dc529.js"></script>

        <script src="/assets/pizza-pie/javascripts/bundles/roma/default.078f91e7e4d.js"></script>

        <script src="https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js"></script>

        <script src="/assets/pizza-pie/javascripts/bundles/roma/search-algolia.ebf410b8502.js"></script>
        

    <script src="/assets/pizza-pie/javascripts/bundles/roma/tvSeries/index/vendors.6d2c081dc9f.js"></script>

    <script src="/assets/pizza-pie/javascripts/bundles/roma/tvSeries/index.377b6e9e889.js"></script>


        
            
            <script>
                if (window.mps && typeof window.mps.writeFooter === 'function') {
                    window.mps.writeFooter();
                }
            </script>
            

            
            <script>
                window._satellite && _satellite.pageBottom();
            </script>
            
        

        
    </body>
</html>

  recorded_at: Sat, 01 Jul 2023 14:56:28 GMT
recorded_with: VCR 6.2.0
